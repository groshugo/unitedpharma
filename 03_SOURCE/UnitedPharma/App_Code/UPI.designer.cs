#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UPI")]
public partial class UPIDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAdministrator(Administrator instance);
  partial void UpdateAdministrator(Administrator instance);
  partial void DeleteAdministrator(Administrator instance);
  partial void InsertSupervisorPosition(SupervisorPosition instance);
  partial void UpdateSupervisorPosition(SupervisorPosition instance);
  partial void DeleteSupervisorPosition(SupervisorPosition instance);
  partial void InsertArea(Area instance);
  partial void UpdateArea(Area instance);
  partial void DeleteArea(Area instance);
  partial void InsertAssignFunction(AssignFunction instance);
  partial void UpdateAssignFunction(AssignFunction instance);
  partial void DeleteAssignFunction(AssignFunction instance);
  partial void InsertChannel(Channel instance);
  partial void UpdateChannel(Channel instance);
  partial void DeleteChannel(Channel instance);
  partial void InsertCustomerLog(CustomerLog instance);
  partial void UpdateCustomerLog(CustomerLog instance);
  partial void DeleteCustomerLog(CustomerLog instance);
  partial void InsertCustomerSupervisor(CustomerSupervisor instance);
  partial void UpdateCustomerSupervisor(CustomerSupervisor instance);
  partial void DeleteCustomerSupervisor(CustomerSupervisor instance);
  partial void InsertCustomerType(CustomerType instance);
  partial void UpdateCustomerType(CustomerType instance);
  partial void DeleteCustomerType(CustomerType instance);
  partial void InsertDistrict(District instance);
  partial void UpdateDistrict(District instance);
  partial void DeleteDistrict(District instance);
  partial void InsertFunction(Function instance);
  partial void UpdateFunction(Function instance);
  partial void DeleteFunction(Function instance);
  partial void InsertGroup(Group instance);
  partial void UpdateGroup(Group instance);
  partial void DeleteGroup(Group instance);
  partial void InsertLocal(Local instance);
  partial void UpdateLocal(Local instance);
  partial void DeleteLocal(Local instance);
  partial void InsertProvince(Province instance);
  partial void UpdateProvince(Province instance);
  partial void DeleteProvince(Province instance);
  partial void InsertRegion(Region instance);
  partial void UpdateRegion(Region instance);
  partial void DeleteRegion(Region instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  partial void InsertSalesArea(SalesArea instance);
  partial void UpdateSalesArea(SalesArea instance);
  partial void DeleteSalesArea(SalesArea instance);
  partial void InsertSalesGroup(SalesGroup instance);
  partial void UpdateSalesGroup(SalesGroup instance);
  partial void DeleteSalesGroup(SalesGroup instance);
  partial void InsertSalesLocal(SalesLocal instance);
  partial void UpdateSalesLocal(SalesLocal instance);
  partial void DeleteSalesLocal(SalesLocal instance);
  partial void InsertSalesmen(Salesmen instance);
  partial void UpdateSalesmen(Salesmen instance);
  partial void DeleteSalesmen(Salesmen instance);
  partial void InsertSalesRegion(SalesRegion instance);
  partial void UpdateSalesRegion(SalesRegion instance);
  partial void DeleteSalesRegion(SalesRegion instance);
  partial void InsertSection(Section instance);
  partial void UpdateSection(Section instance);
  partial void DeleteSection(Section instance);
  partial void InsertSmsType(SmsType instance);
  partial void UpdateSmsType(SmsType instance);
  partial void DeleteSmsType(SmsType instance);
  partial void InsertSupervisorManageCustomer(SupervisorManageCustomer instance);
  partial void UpdateSupervisorManageCustomer(SupervisorManageCustomer instance);
  partial void DeleteSupervisorManageCustomer(SupervisorManageCustomer instance);
  partial void InsertSchedulePromotion(SchedulePromotion instance);
  partial void UpdateSchedulePromotion(SchedulePromotion instance);
  partial void DeleteSchedulePromotion(SchedulePromotion instance);
  partial void InsertPromotion(Promotion instance);
  partial void UpdatePromotion(Promotion instance);
  partial void DeletePromotion(Promotion instance);
  partial void InsertSmsObj(SmsObj instance);
  partial void UpdateSmsObj(SmsObj instance);
  partial void DeleteSmsObj(SmsObj instance);
  partial void InsertDashboard(Dashboard instance);
  partial void UpdateDashboard(Dashboard instance);
  partial void DeleteDashboard(Dashboard instance);
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  #endregion
	
	public UPIDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UPIConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public UPIDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public UPIDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public UPIDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public UPIDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Administrator> Administrators
	{
		get
		{
			return this.GetTable<Administrator>();
		}
	}
	
	public System.Data.Linq.Table<SupervisorPosition> SupervisorPositions
	{
		get
		{
			return this.GetTable<SupervisorPosition>();
		}
	}
	
	public System.Data.Linq.Table<Area> Areas
	{
		get
		{
			return this.GetTable<Area>();
		}
	}
	
	public System.Data.Linq.Table<AssignFunction> AssignFunctions
	{
		get
		{
			return this.GetTable<AssignFunction>();
		}
	}
	
	public System.Data.Linq.Table<Channel> Channels
	{
		get
		{
			return this.GetTable<Channel>();
		}
	}
	
	public System.Data.Linq.Table<CustomerLog> CustomerLogs
	{
		get
		{
			return this.GetTable<CustomerLog>();
		}
	}
	
	public System.Data.Linq.Table<CustomerSupervisor> CustomerSupervisors
	{
		get
		{
			return this.GetTable<CustomerSupervisor>();
		}
	}
	
	public System.Data.Linq.Table<CustomerType> CustomerTypes
	{
		get
		{
			return this.GetTable<CustomerType>();
		}
	}
	
	public System.Data.Linq.Table<District> Districts
	{
		get
		{
			return this.GetTable<District>();
		}
	}
	
	public System.Data.Linq.Table<Function> Functions
	{
		get
		{
			return this.GetTable<Function>();
		}
	}
	
	public System.Data.Linq.Table<Group> Groups
	{
		get
		{
			return this.GetTable<Group>();
		}
	}
	
	public System.Data.Linq.Table<Local> Locals
	{
		get
		{
			return this.GetTable<Local>();
		}
	}
	
	public System.Data.Linq.Table<Province> Provinces
	{
		get
		{
			return this.GetTable<Province>();
		}
	}
	
	public System.Data.Linq.Table<Region> Regions
	{
		get
		{
			return this.GetTable<Region>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	public System.Data.Linq.Table<SalesArea> SalesAreas
	{
		get
		{
			return this.GetTable<SalesArea>();
		}
	}
	
	public System.Data.Linq.Table<SalesGroup> SalesGroups
	{
		get
		{
			return this.GetTable<SalesGroup>();
		}
	}
	
	public System.Data.Linq.Table<SalesLocal> SalesLocals
	{
		get
		{
			return this.GetTable<SalesLocal>();
		}
	}
	
	public System.Data.Linq.Table<Salesmen> Salesmens
	{
		get
		{
			return this.GetTable<Salesmen>();
		}
	}
	
	public System.Data.Linq.Table<SalesRegion> SalesRegions
	{
		get
		{
			return this.GetTable<SalesRegion>();
		}
	}
	
	public System.Data.Linq.Table<Section> Sections
	{
		get
		{
			return this.GetTable<Section>();
		}
	}
	
	public System.Data.Linq.Table<SmsType> SmsTypes
	{
		get
		{
			return this.GetTable<SmsType>();
		}
	}
	
	public System.Data.Linq.Table<SupervisorManageCustomer> SupervisorManageCustomers
	{
		get
		{
			return this.GetTable<SupervisorManageCustomer>();
		}
	}
	
	public System.Data.Linq.Table<SchedulePromotion> SchedulePromotions
	{
		get
		{
			return this.GetTable<SchedulePromotion>();
		}
	}
	
	public System.Data.Linq.Table<Promotion> Promotions
	{
		get
		{
			return this.GetTable<Promotion>();
		}
	}
	
	public System.Data.Linq.Table<SmsObj> SmsObjs
	{
		get
		{
			return this.GetTable<SmsObj>();
		}
	}
	
	public System.Data.Linq.Table<Dashboard> Dashboards
	{
		get
		{
			return this.GetTable<Dashboard>();
		}
	}
	
	public System.Data.Linq.Table<Customer> Customers
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_SchedulePromotion")]
	public ISingleResult<SP_SchedulePromotionResult> SP_SchedulePromotion([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string phoneList)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phoneList);
		return ((ISingleResult<SP_SchedulePromotionResult>)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrator")]
public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _Fullname;
	
	private string _Phone;
	
	private string _Password;
	
	private System.Nullable<bool> _AllowApprove;
	
	private EntitySet<AssignFunction> _AssignFunctions;
	
	private EntitySet<Promotion> _Promotions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAllowApproveChanging(System.Nullable<bool> value);
    partial void OnAllowApproveChanged();
    #endregion
	
	public Administrator()
	{
		this._AssignFunctions = new EntitySet<AssignFunction>(new Action<AssignFunction>(this.attach_AssignFunctions), new Action<AssignFunction>(this.detach_AssignFunctions));
		this._Promotions = new EntitySet<Promotion>(new Action<Promotion>(this.attach_Promotions), new Action<Promotion>(this.detach_Promotions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Fullname
	{
		get
		{
			return this._Fullname;
		}
		set
		{
			if ((this._Fullname != value))
			{
				this.OnFullnameChanging(value);
				this.SendPropertyChanging();
				this._Fullname = value;
				this.SendPropertyChanged("Fullname");
				this.OnFullnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowApprove", DbType="Bit")]
	public System.Nullable<bool> AllowApprove
	{
		get
		{
			return this._AllowApprove;
		}
		set
		{
			if ((this._AllowApprove != value))
			{
				this.OnAllowApproveChanging(value);
				this.SendPropertyChanging();
				this._AllowApprove = value;
				this.SendPropertyChanged("AllowApprove");
				this.OnAllowApproveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrator_AssignFunction", Storage="_AssignFunctions", ThisKey="Id", OtherKey="AdministratorId")]
	public EntitySet<AssignFunction> AssignFunctions
	{
		get
		{
			return this._AssignFunctions;
		}
		set
		{
			this._AssignFunctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrator_Promotion", Storage="_Promotions", ThisKey="Id", OtherKey="AdministratorId")]
	public EntitySet<Promotion> Promotions
	{
		get
		{
			return this._Promotions;
		}
		set
		{
			this._Promotions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AssignFunctions(AssignFunction entity)
	{
		this.SendPropertyChanging();
		entity.Administrator = this;
	}
	
	private void detach_AssignFunctions(AssignFunction entity)
	{
		this.SendPropertyChanging();
		entity.Administrator = null;
	}
	
	private void attach_Promotions(Promotion entity)
	{
		this.SendPropertyChanging();
		entity.Administrator = this;
	}
	
	private void detach_Promotions(Promotion entity)
	{
		this.SendPropertyChanging();
		entity.Administrator = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupervisorPosition")]
public partial class SupervisorPosition : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _PositionName;
	
	private EntitySet<CustomerSupervisor> _CustomerSupervisors;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    #endregion
	
	public SupervisorPosition()
	{
		this._CustomerSupervisors = new EntitySet<CustomerSupervisor>(new Action<CustomerSupervisor>(this.attach_CustomerSupervisors), new Action<CustomerSupervisor>(this.detach_CustomerSupervisors));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PositionName
	{
		get
		{
			return this._PositionName;
		}
		set
		{
			if ((this._PositionName != value))
			{
				this.OnPositionNameChanging(value);
				this.SendPropertyChanging();
				this._PositionName = value;
				this.SendPropertyChanged("PositionName");
				this.OnPositionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupervisorPosition_CustomerSupervisor", Storage="_CustomerSupervisors", ThisKey="Id", OtherKey="PositionId")]
	public EntitySet<CustomerSupervisor> CustomerSupervisors
	{
		get
		{
			return this._CustomerSupervisors;
		}
		set
		{
			this._CustomerSupervisors.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerSupervisors(CustomerSupervisor entity)
	{
		this.SendPropertyChanging();
		entity.SupervisorPosition = this;
	}
	
	private void detach_CustomerSupervisors(CustomerSupervisor entity)
	{
		this.SendPropertyChanging();
		entity.SupervisorPosition = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _AreaName;
	
	private string _Description;
	
	private int _RegionId;
	
	private EntitySet<Local> _Locals;
	
	private EntitySet<SalesArea> _SalesAreas;
	
	private EntityRef<Region> _Region;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    #endregion
	
	public Area()
	{
		this._Locals = new EntitySet<Local>(new Action<Local>(this.attach_Locals), new Action<Local>(this.detach_Locals));
		this._SalesAreas = new EntitySet<SalesArea>(new Action<SalesArea>(this.attach_SalesAreas), new Action<SalesArea>(this.detach_SalesAreas));
		this._Region = default(EntityRef<Region>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AreaName
	{
		get
		{
			return this._AreaName;
		}
		set
		{
			if ((this._AreaName != value))
			{
				this.OnAreaNameChanging(value);
				this.SendPropertyChanging();
				this._AreaName = value;
				this.SendPropertyChanged("AreaName");
				this.OnAreaNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", DbType="Int NOT NULL")]
	public int RegionId
	{
		get
		{
			return this._RegionId;
		}
		set
		{
			if ((this._RegionId != value))
			{
				if (this._Region.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRegionIdChanging(value);
				this.SendPropertyChanging();
				this._RegionId = value;
				this.SendPropertyChanged("RegionId");
				this.OnRegionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Local", Storage="_Locals", ThisKey="Id", OtherKey="AreaId")]
	public EntitySet<Local> Locals
	{
		get
		{
			return this._Locals;
		}
		set
		{
			this._Locals.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_SalesArea", Storage="_SalesAreas", ThisKey="Id", OtherKey="AreaId")]
	public EntitySet<SalesArea> SalesAreas
	{
		get
		{
			return this._SalesAreas;
		}
		set
		{
			this._SalesAreas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Area", Storage="_Region", ThisKey="RegionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Region Region
	{
		get
		{
			return this._Region.Entity;
		}
		set
		{
			Region previousValue = this._Region.Entity;
			if (((previousValue != value) 
						|| (this._Region.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Region.Entity = null;
					previousValue.Areas.Remove(this);
				}
				this._Region.Entity = value;
				if ((value != null))
				{
					value.Areas.Add(this);
					this._RegionId = value.Id;
				}
				else
				{
					this._RegionId = default(int);
				}
				this.SendPropertyChanged("Region");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Locals(Local entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_Locals(Local entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
	
	private void attach_SalesAreas(SalesArea entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_SalesAreas(SalesArea entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssignFunction")]
public partial class AssignFunction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _FunctionId;
	
	private System.Nullable<int> _AdministratorId;
	
	private EntityRef<Administrator> _Administrator;
	
	private EntityRef<Function> _Function;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    partial void OnAdministratorIdChanging(System.Nullable<int> value);
    partial void OnAdministratorIdChanged();
    #endregion
	
	public AssignFunction()
	{
		this._Administrator = default(EntityRef<Administrator>);
		this._Function = default(EntityRef<Function>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionId", DbType="Int NOT NULL")]
	public int FunctionId
	{
		get
		{
			return this._FunctionId;
		}
		set
		{
			if ((this._FunctionId != value))
			{
				if (this._Function.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFunctionIdChanging(value);
				this.SendPropertyChanging();
				this._FunctionId = value;
				this.SendPropertyChanged("FunctionId");
				this.OnFunctionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorId", DbType="Int")]
	public System.Nullable<int> AdministratorId
	{
		get
		{
			return this._AdministratorId;
		}
		set
		{
			if ((this._AdministratorId != value))
			{
				if (this._Administrator.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAdministratorIdChanging(value);
				this.SendPropertyChanging();
				this._AdministratorId = value;
				this.SendPropertyChanged("AdministratorId");
				this.OnAdministratorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrator_AssignFunction", Storage="_Administrator", ThisKey="AdministratorId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Administrator Administrator
	{
		get
		{
			return this._Administrator.Entity;
		}
		set
		{
			Administrator previousValue = this._Administrator.Entity;
			if (((previousValue != value) 
						|| (this._Administrator.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Administrator.Entity = null;
					previousValue.AssignFunctions.Remove(this);
				}
				this._Administrator.Entity = value;
				if ((value != null))
				{
					value.AssignFunctions.Add(this);
					this._AdministratorId = value.Id;
				}
				else
				{
					this._AdministratorId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Administrator");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Function_AssignFunction", Storage="_Function", ThisKey="FunctionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Function Function
	{
		get
		{
			return this._Function.Entity;
		}
		set
		{
			Function previousValue = this._Function.Entity;
			if (((previousValue != value) 
						|| (this._Function.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Function.Entity = null;
					previousValue.AssignFunctions.Remove(this);
				}
				this._Function.Entity = value;
				if ((value != null))
				{
					value.AssignFunctions.Add(this);
					this._FunctionId = value.Id;
				}
				else
				{
					this._FunctionId = default(int);
				}
				this.SendPropertyChanged("Function");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Channel")]
public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _ChannelName;
	
	private System.Nullable<int> _ParentChannelId;
	
	private EntitySet<CustomerLog> _CustomerLogs;
	
	private EntitySet<Customer> _Customers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnChannelNameChanging(string value);
    partial void OnChannelNameChanged();
    partial void OnParentChannelIdChanging(System.Nullable<int> value);
    partial void OnParentChannelIdChanged();
    #endregion
	
	public Channel()
	{
		this._CustomerLogs = new EntitySet<CustomerLog>(new Action<CustomerLog>(this.attach_CustomerLogs), new Action<CustomerLog>(this.detach_CustomerLogs));
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string ChannelName
	{
		get
		{
			return this._ChannelName;
		}
		set
		{
			if ((this._ChannelName != value))
			{
				this.OnChannelNameChanging(value);
				this.SendPropertyChanging();
				this._ChannelName = value;
				this.SendPropertyChanged("ChannelName");
				this.OnChannelNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentChannelId", DbType="Int")]
	public System.Nullable<int> ParentChannelId
	{
		get
		{
			return this._ParentChannelId;
		}
		set
		{
			if ((this._ParentChannelId != value))
			{
				this.OnParentChannelIdChanging(value);
				this.SendPropertyChanging();
				this._ParentChannelId = value;
				this.SendPropertyChanged("ParentChannelId");
				this.OnParentChannelIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_CustomerLog", Storage="_CustomerLogs", ThisKey="Id", OtherKey="ChannelId")]
	public EntitySet<CustomerLog> CustomerLogs
	{
		get
		{
			return this._CustomerLogs;
		}
		set
		{
			this._CustomerLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_Customer", Storage="_Customers", ThisKey="Id", OtherKey="ChannelId")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Channel = this;
	}
	
	private void detach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Channel = null;
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Channel = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Channel = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerLog")]
public partial class CustomerLog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _FullName;
	
	private string _Address;
	
	private string _Street;
	
	private string _Ward;
	
	private string _Phone;
	
	private string _Password;
	
	private System.Nullable<int> _CustomerTypeId;
	
	private System.Nullable<int> _ChannelId;
	
	private System.Nullable<int> _DistrictId;
	
	private System.Nullable<int> _LocalId;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<System.DateTime> _UpdateDate;
	
	private System.Nullable<bool> _Status;
	
	private System.Nullable<bool> _IsApprove;
	
	private System.Nullable<int> _ApproveBy;
	
	private System.Nullable<int> _ChangeBy;
	
	private System.Nullable<int> _CustomerId;
	
	private EntityRef<Channel> _Channel;
	
	private EntityRef<CustomerType> _CustomerType;
	
	private EntityRef<District> _District;
	
	private EntityRef<Local> _Local;
	
	private EntityRef<Salesmen> _Salesmen;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnWardChanging(string value);
    partial void OnWardChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCustomerTypeIdChanging(System.Nullable<int> value);
    partial void OnCustomerTypeIdChanged();
    partial void OnChannelIdChanging(System.Nullable<int> value);
    partial void OnChannelIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<int> value);
    partial void OnDistrictIdChanged();
    partial void OnLocalIdChanging(System.Nullable<int> value);
    partial void OnLocalIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnIsApproveChanging(System.Nullable<bool> value);
    partial void OnIsApproveChanged();
    partial void OnApproveByChanging(System.Nullable<int> value);
    partial void OnApproveByChanged();
    partial void OnChangeByChanging(System.Nullable<int> value);
    partial void OnChangeByChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    #endregion
	
	public CustomerLog()
	{
		this._Channel = default(EntityRef<Channel>);
		this._CustomerType = default(EntityRef<CustomerType>);
		this._District = default(EntityRef<District>);
		this._Local = default(EntityRef<Local>);
		this._Salesmen = default(EntityRef<Salesmen>);
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="NVarChar(MAX)")]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(MAX)")]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward", DbType="NVarChar(MAX)")]
	public string Ward
	{
		get
		{
			return this._Ward;
		}
		set
		{
			if ((this._Ward != value))
			{
				this.OnWardChanging(value);
				this.SendPropertyChanging();
				this._Ward = value;
				this.SendPropertyChanged("Ward");
				this.OnWardChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTypeId", DbType="Int")]
	public System.Nullable<int> CustomerTypeId
	{
		get
		{
			return this._CustomerTypeId;
		}
		set
		{
			if ((this._CustomerTypeId != value))
			{
				if (this._CustomerType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerTypeIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerTypeId = value;
				this.SendPropertyChanged("CustomerTypeId");
				this.OnCustomerTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelId", DbType="Int")]
	public System.Nullable<int> ChannelId
	{
		get
		{
			return this._ChannelId;
		}
		set
		{
			if ((this._ChannelId != value))
			{
				if (this._Channel.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChannelIdChanging(value);
				this.SendPropertyChanging();
				this._ChannelId = value;
				this.SendPropertyChanged("ChannelId");
				this.OnChannelIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int")]
	public System.Nullable<int> DistrictId
	{
		get
		{
			return this._DistrictId;
		}
		set
		{
			if ((this._DistrictId != value))
			{
				if (this._District.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDistrictIdChanging(value);
				this.SendPropertyChanging();
				this._DistrictId = value;
				this.SendPropertyChanged("DistrictId");
				this.OnDistrictIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalId", DbType="Int")]
	public System.Nullable<int> LocalId
	{
		get
		{
			return this._LocalId;
		}
		set
		{
			if ((this._LocalId != value))
			{
				if (this._Local.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocalIdChanging(value);
				this.SendPropertyChanging();
				this._LocalId = value;
				this.SendPropertyChanged("LocalId");
				this.OnLocalIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> UpdateDate
	{
		get
		{
			return this._UpdateDate;
		}
		set
		{
			if ((this._UpdateDate != value))
			{
				this.OnUpdateDateChanging(value);
				this.SendPropertyChanging();
				this._UpdateDate = value;
				this.SendPropertyChanged("UpdateDate");
				this.OnUpdateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
	public System.Nullable<bool> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApprove", DbType="Bit")]
	public System.Nullable<bool> IsApprove
	{
		get
		{
			return this._IsApprove;
		}
		set
		{
			if ((this._IsApprove != value))
			{
				this.OnIsApproveChanging(value);
				this.SendPropertyChanging();
				this._IsApprove = value;
				this.SendPropertyChanged("IsApprove");
				this.OnIsApproveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveBy", DbType="Int")]
	public System.Nullable<int> ApproveBy
	{
		get
		{
			return this._ApproveBy;
		}
		set
		{
			if ((this._ApproveBy != value))
			{
				this.OnApproveByChanging(value);
				this.SendPropertyChanging();
				this._ApproveBy = value;
				this.SendPropertyChanged("ApproveBy");
				this.OnApproveByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeBy", DbType="Int")]
	public System.Nullable<int> ChangeBy
	{
		get
		{
			return this._ChangeBy;
		}
		set
		{
			if ((this._ChangeBy != value))
			{
				if (this._Salesmen.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangeByChanging(value);
				this.SendPropertyChanging();
				this._ChangeBy = value;
				this.SendPropertyChanged("ChangeBy");
				this.OnChangeByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
	public System.Nullable<int> CustomerId
	{
		get
		{
			return this._CustomerId;
		}
		set
		{
			if ((this._CustomerId != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerId = value;
				this.SendPropertyChanged("CustomerId");
				this.OnCustomerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_CustomerLog", Storage="_Channel", ThisKey="ChannelId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Channel Channel
	{
		get
		{
			return this._Channel.Entity;
		}
		set
		{
			Channel previousValue = this._Channel.Entity;
			if (((previousValue != value) 
						|| (this._Channel.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Channel.Entity = null;
					previousValue.CustomerLogs.Remove(this);
				}
				this._Channel.Entity = value;
				if ((value != null))
				{
					value.CustomerLogs.Add(this);
					this._ChannelId = value.Id;
				}
				else
				{
					this._ChannelId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Channel");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_CustomerLog", Storage="_CustomerType", ThisKey="CustomerTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public CustomerType CustomerType
	{
		get
		{
			return this._CustomerType.Entity;
		}
		set
		{
			CustomerType previousValue = this._CustomerType.Entity;
			if (((previousValue != value) 
						|| (this._CustomerType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CustomerType.Entity = null;
					previousValue.CustomerLogs.Remove(this);
				}
				this._CustomerType.Entity = value;
				if ((value != null))
				{
					value.CustomerLogs.Add(this);
					this._CustomerTypeId = value.Id;
				}
				else
				{
					this._CustomerTypeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("CustomerType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_CustomerLog", Storage="_District", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public District District
	{
		get
		{
			return this._District.Entity;
		}
		set
		{
			District previousValue = this._District.Entity;
			if (((previousValue != value) 
						|| (this._District.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._District.Entity = null;
					previousValue.CustomerLogs.Remove(this);
				}
				this._District.Entity = value;
				if ((value != null))
				{
					value.CustomerLogs.Add(this);
					this._DistrictId = value.Id;
				}
				else
				{
					this._DistrictId = default(Nullable<int>);
				}
				this.SendPropertyChanged("District");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Local_CustomerLog", Storage="_Local", ThisKey="LocalId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Local Local
	{
		get
		{
			return this._Local.Entity;
		}
		set
		{
			Local previousValue = this._Local.Entity;
			if (((previousValue != value) 
						|| (this._Local.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Local.Entity = null;
					previousValue.CustomerLogs.Remove(this);
				}
				this._Local.Entity = value;
				if ((value != null))
				{
					value.CustomerLogs.Add(this);
					this._LocalId = value.Id;
				}
				else
				{
					this._LocalId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Local");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_CustomerLog", Storage="_Salesmen", ThisKey="ChangeBy", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Salesmen Salesmen
	{
		get
		{
			return this._Salesmen.Entity;
		}
		set
		{
			Salesmen previousValue = this._Salesmen.Entity;
			if (((previousValue != value) 
						|| (this._Salesmen.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Salesmen.Entity = null;
					previousValue.CustomerLogs.Remove(this);
				}
				this._Salesmen.Entity = value;
				if ((value != null))
				{
					value.CustomerLogs.Add(this);
					this._ChangeBy = value.Id;
				}
				else
				{
					this._ChangeBy = default(Nullable<int>);
				}
				this.SendPropertyChanged("Salesmen");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerLog", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.CustomerLogs.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.CustomerLogs.Add(this);
					this._CustomerId = value.Id;
				}
				else
				{
					this._CustomerId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerSupervisor")]
public partial class CustomerSupervisor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _FullName;
	
	private string _Address;
	
	private string _Street;
	
	private string _Ward;
	
	private string _Phone;
	
	private System.Nullable<int> _CustomerId;
	
	private System.Nullable<int> _DistrictId;
	
	private System.Nullable<int> _PositionId;
	
	private EntitySet<SupervisorManageCustomer> _SupervisorManageCustomers;
	
	private EntityRef<SupervisorPosition> _SupervisorPosition;
	
	private EntityRef<District> _District;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnWardChanging(string value);
    partial void OnWardChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<int> value);
    partial void OnDistrictIdChanged();
    partial void OnPositionIdChanging(System.Nullable<int> value);
    partial void OnPositionIdChanged();
    #endregion
	
	public CustomerSupervisor()
	{
		this._SupervisorManageCustomers = new EntitySet<SupervisorManageCustomer>(new Action<SupervisorManageCustomer>(this.attach_SupervisorManageCustomers), new Action<SupervisorManageCustomer>(this.detach_SupervisorManageCustomers));
		this._SupervisorPosition = default(EntityRef<SupervisorPosition>);
		this._District = default(EntityRef<District>);
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(255)")]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward", DbType="NVarChar(255)")]
	public string Ward
	{
		get
		{
			return this._Ward;
		}
		set
		{
			if ((this._Ward != value))
			{
				this.OnWardChanging(value);
				this.SendPropertyChanging();
				this._Ward = value;
				this.SendPropertyChanged("Ward");
				this.OnWardChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
	public System.Nullable<int> CustomerId
	{
		get
		{
			return this._CustomerId;
		}
		set
		{
			if ((this._CustomerId != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerId = value;
				this.SendPropertyChanged("CustomerId");
				this.OnCustomerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int")]
	public System.Nullable<int> DistrictId
	{
		get
		{
			return this._DistrictId;
		}
		set
		{
			if ((this._DistrictId != value))
			{
				if (this._District.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDistrictIdChanging(value);
				this.SendPropertyChanging();
				this._DistrictId = value;
				this.SendPropertyChanged("DistrictId");
				this.OnDistrictIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int")]
	public System.Nullable<int> PositionId
	{
		get
		{
			return this._PositionId;
		}
		set
		{
			if ((this._PositionId != value))
			{
				if (this._SupervisorPosition.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPositionIdChanging(value);
				this.SendPropertyChanging();
				this._PositionId = value;
				this.SendPropertyChanged("PositionId");
				this.OnPositionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerSupervisor_SupervisorManageCustomer", Storage="_SupervisorManageCustomers", ThisKey="Id", OtherKey="SupervisorId")]
	public EntitySet<SupervisorManageCustomer> SupervisorManageCustomers
	{
		get
		{
			return this._SupervisorManageCustomers;
		}
		set
		{
			this._SupervisorManageCustomers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupervisorPosition_CustomerSupervisor", Storage="_SupervisorPosition", ThisKey="PositionId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public SupervisorPosition SupervisorPosition
	{
		get
		{
			return this._SupervisorPosition.Entity;
		}
		set
		{
			SupervisorPosition previousValue = this._SupervisorPosition.Entity;
			if (((previousValue != value) 
						|| (this._SupervisorPosition.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SupervisorPosition.Entity = null;
					previousValue.CustomerSupervisors.Remove(this);
				}
				this._SupervisorPosition.Entity = value;
				if ((value != null))
				{
					value.CustomerSupervisors.Add(this);
					this._PositionId = value.Id;
				}
				else
				{
					this._PositionId = default(Nullable<int>);
				}
				this.SendPropertyChanged("SupervisorPosition");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_CustomerSupervisor", Storage="_District", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public District District
	{
		get
		{
			return this._District.Entity;
		}
		set
		{
			District previousValue = this._District.Entity;
			if (((previousValue != value) 
						|| (this._District.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._District.Entity = null;
					previousValue.CustomerSupervisors.Remove(this);
				}
				this._District.Entity = value;
				if ((value != null))
				{
					value.CustomerSupervisors.Add(this);
					this._DistrictId = value.Id;
				}
				else
				{
					this._DistrictId = default(Nullable<int>);
				}
				this.SendPropertyChanged("District");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerSupervisor", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.CustomerSupervisors.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.CustomerSupervisors.Add(this);
					this._CustomerId = value.Id;
				}
				else
				{
					this._CustomerId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SupervisorManageCustomers(SupervisorManageCustomer entity)
	{
		this.SendPropertyChanging();
		entity.CustomerSupervisor = this;
	}
	
	private void detach_SupervisorManageCustomers(SupervisorManageCustomer entity)
	{
		this.SendPropertyChanging();
		entity.CustomerSupervisor = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerType")]
public partial class CustomerType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _TypeName;
	
	private EntitySet<CustomerLog> _CustomerLogs;
	
	private EntitySet<Customer> _Customers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
	
	public CustomerType()
	{
		this._CustomerLogs = new EntitySet<CustomerLog>(new Action<CustomerLog>(this.attach_CustomerLogs), new Action<CustomerLog>(this.detach_CustomerLogs));
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string TypeName
	{
		get
		{
			return this._TypeName;
		}
		set
		{
			if ((this._TypeName != value))
			{
				this.OnTypeNameChanging(value);
				this.SendPropertyChanging();
				this._TypeName = value;
				this.SendPropertyChanged("TypeName");
				this.OnTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_CustomerLog", Storage="_CustomerLogs", ThisKey="Id", OtherKey="CustomerTypeId")]
	public EntitySet<CustomerLog> CustomerLogs
	{
		get
		{
			return this._CustomerLogs;
		}
		set
		{
			this._CustomerLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_Customer", Storage="_Customers", ThisKey="Id", OtherKey="CustomerTypeId")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.CustomerType = this;
	}
	
	private void detach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.CustomerType = null;
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.CustomerType = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.CustomerType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District")]
public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _DistrictName;
	
	private int _ProvinceId;
	
	private EntitySet<CustomerLog> _CustomerLogs;
	
	private EntitySet<CustomerSupervisor> _CustomerSupervisors;
	
	private EntitySet<Customer> _Customers;
	
	private EntityRef<Province> _Province;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    #endregion
	
	public District()
	{
		this._CustomerLogs = new EntitySet<CustomerLog>(new Action<CustomerLog>(this.attach_CustomerLogs), new Action<CustomerLog>(this.detach_CustomerLogs));
		this._CustomerSupervisors = new EntitySet<CustomerSupervisor>(new Action<CustomerSupervisor>(this.attach_CustomerSupervisors), new Action<CustomerSupervisor>(this.detach_CustomerSupervisors));
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		this._Province = default(EntityRef<Province>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DistrictName
	{
		get
		{
			return this._DistrictName;
		}
		set
		{
			if ((this._DistrictName != value))
			{
				this.OnDistrictNameChanging(value);
				this.SendPropertyChanging();
				this._DistrictName = value;
				this.SendPropertyChanged("DistrictName");
				this.OnDistrictNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
	public int ProvinceId
	{
		get
		{
			return this._ProvinceId;
		}
		set
		{
			if ((this._ProvinceId != value))
			{
				if (this._Province.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProvinceIdChanging(value);
				this.SendPropertyChanging();
				this._ProvinceId = value;
				this.SendPropertyChanged("ProvinceId");
				this.OnProvinceIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_CustomerLog", Storage="_CustomerLogs", ThisKey="Id", OtherKey="DistrictId")]
	public EntitySet<CustomerLog> CustomerLogs
	{
		get
		{
			return this._CustomerLogs;
		}
		set
		{
			this._CustomerLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_CustomerSupervisor", Storage="_CustomerSupervisors", ThisKey="Id", OtherKey="DistrictId")]
	public EntitySet<CustomerSupervisor> CustomerSupervisors
	{
		get
		{
			return this._CustomerSupervisors;
		}
		set
		{
			this._CustomerSupervisors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Customer", Storage="_Customers", ThisKey="Id", OtherKey="DistrictId")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_District", Storage="_Province", ThisKey="ProvinceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Province Province
	{
		get
		{
			return this._Province.Entity;
		}
		set
		{
			Province previousValue = this._Province.Entity;
			if (((previousValue != value) 
						|| (this._Province.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Province.Entity = null;
					previousValue.Districts.Remove(this);
				}
				this._Province.Entity = value;
				if ((value != null))
				{
					value.Districts.Add(this);
					this._ProvinceId = value.Id;
				}
				else
				{
					this._ProvinceId = default(int);
				}
				this.SendPropertyChanged("Province");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.District = this;
	}
	
	private void detach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.District = null;
	}
	
	private void attach_CustomerSupervisors(CustomerSupervisor entity)
	{
		this.SendPropertyChanging();
		entity.District = this;
	}
	
	private void detach_CustomerSupervisors(CustomerSupervisor entity)
	{
		this.SendPropertyChanging();
		entity.District = null;
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.District = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.District = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Function]")]
public partial class Function : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _FunctionName;
	
	private System.Nullable<int> _ParentFunctionId;
	
	private string _Action;
	
	private EntitySet<AssignFunction> _AssignFunctions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFunctionNameChanging(string value);
    partial void OnFunctionNameChanged();
    partial void OnParentFunctionIdChanging(System.Nullable<int> value);
    partial void OnParentFunctionIdChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    #endregion
	
	public Function()
	{
		this._AssignFunctions = new EntitySet<AssignFunction>(new Action<AssignFunction>(this.attach_AssignFunctions), new Action<AssignFunction>(this.detach_AssignFunctions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string FunctionName
	{
		get
		{
			return this._FunctionName;
		}
		set
		{
			if ((this._FunctionName != value))
			{
				this.OnFunctionNameChanging(value);
				this.SendPropertyChanging();
				this._FunctionName = value;
				this.SendPropertyChanged("FunctionName");
				this.OnFunctionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentFunctionId", DbType="Int")]
	public System.Nullable<int> ParentFunctionId
	{
		get
		{
			return this._ParentFunctionId;
		}
		set
		{
			if ((this._ParentFunctionId != value))
			{
				this.OnParentFunctionIdChanging(value);
				this.SendPropertyChanging();
				this._ParentFunctionId = value;
				this.SendPropertyChanged("ParentFunctionId");
				this.OnParentFunctionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(MAX)")]
	public string Action
	{
		get
		{
			return this._Action;
		}
		set
		{
			if ((this._Action != value))
			{
				this.OnActionChanging(value);
				this.SendPropertyChanging();
				this._Action = value;
				this.SendPropertyChanged("Action");
				this.OnActionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Function_AssignFunction", Storage="_AssignFunctions", ThisKey="Id", OtherKey="FunctionId")]
	public EntitySet<AssignFunction> AssignFunctions
	{
		get
		{
			return this._AssignFunctions;
		}
		set
		{
			this._AssignFunctions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AssignFunctions(AssignFunction entity)
	{
		this.SendPropertyChanging();
		entity.Function = this;
	}
	
	private void detach_AssignFunctions(AssignFunction entity)
	{
		this.SendPropertyChanging();
		entity.Function = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _GroupName;
	
	private string _Description;
	
	private EntitySet<Region> _Regions;
	
	private EntitySet<SalesGroup> _SalesGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Group()
	{
		this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
		this._SalesGroups = new EntitySet<SalesGroup>(new Action<SalesGroup>(this.attach_SalesGroups), new Action<SalesGroup>(this.detach_SalesGroups));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string GroupName
	{
		get
		{
			return this._GroupName;
		}
		set
		{
			if ((this._GroupName != value))
			{
				this.OnGroupNameChanging(value);
				this.SendPropertyChanging();
				this._GroupName = value;
				this.SendPropertyChanged("GroupName");
				this.OnGroupNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Region", Storage="_Regions", ThisKey="Id", OtherKey="GroupId")]
	public EntitySet<Region> Regions
	{
		get
		{
			return this._Regions;
		}
		set
		{
			this._Regions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_SalesGroup", Storage="_SalesGroups", ThisKey="Id", OtherKey="GroupId")]
	public EntitySet<SalesGroup> SalesGroups
	{
		get
		{
			return this._SalesGroups;
		}
		set
		{
			this._SalesGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Regions(Region entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_Regions(Region entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
	
	private void attach_SalesGroups(SalesGroup entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_SalesGroups(SalesGroup entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Local")]
public partial class Local : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _LocalName;
	
	private string _Description;
	
	private int _AreaId;
	
	private EntitySet<CustomerLog> _CustomerLogs;
	
	private EntitySet<SalesLocal> _SalesLocals;
	
	private EntitySet<Customer> _Customers;
	
	private EntityRef<Area> _Area;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnLocalNameChanging(string value);
    partial void OnLocalNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAreaIdChanging(int value);
    partial void OnAreaIdChanged();
    #endregion
	
	public Local()
	{
		this._CustomerLogs = new EntitySet<CustomerLog>(new Action<CustomerLog>(this.attach_CustomerLogs), new Action<CustomerLog>(this.detach_CustomerLogs));
		this._SalesLocals = new EntitySet<SalesLocal>(new Action<SalesLocal>(this.attach_SalesLocals), new Action<SalesLocal>(this.detach_SalesLocals));
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		this._Area = default(EntityRef<Area>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string LocalName
	{
		get
		{
			return this._LocalName;
		}
		set
		{
			if ((this._LocalName != value))
			{
				this.OnLocalNameChanging(value);
				this.SendPropertyChanging();
				this._LocalName = value;
				this.SendPropertyChanged("LocalName");
				this.OnLocalNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="Int NOT NULL")]
	public int AreaId
	{
		get
		{
			return this._AreaId;
		}
		set
		{
			if ((this._AreaId != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAreaIdChanging(value);
				this.SendPropertyChanging();
				this._AreaId = value;
				this.SendPropertyChanged("AreaId");
				this.OnAreaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Local_CustomerLog", Storage="_CustomerLogs", ThisKey="Id", OtherKey="LocalId")]
	public EntitySet<CustomerLog> CustomerLogs
	{
		get
		{
			return this._CustomerLogs;
		}
		set
		{
			this._CustomerLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Local_SalesLocal", Storage="_SalesLocals", ThisKey="Id", OtherKey="LocalId")]
	public EntitySet<SalesLocal> SalesLocals
	{
		get
		{
			return this._SalesLocals;
		}
		set
		{
			this._SalesLocals.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Local_Customer", Storage="_Customers", ThisKey="Id", OtherKey="LocalId")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Local", Storage="_Area", ThisKey="AreaId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.Locals.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.Locals.Add(this);
					this._AreaId = value.Id;
				}
				else
				{
					this._AreaId = default(int);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Local = this;
	}
	
	private void detach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Local = null;
	}
	
	private void attach_SalesLocals(SalesLocal entity)
	{
		this.SendPropertyChanging();
		entity.Local = this;
	}
	
	private void detach_SalesLocals(SalesLocal entity)
	{
		this.SendPropertyChanging();
		entity.Local = null;
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Local = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Local = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _ProvinceName;
	
	private int _SectionId;
	
	private EntitySet<District> _Districts;
	
	private EntityRef<Section> _Section;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    #endregion
	
	public Province()
	{
		this._Districts = new EntitySet<District>(new Action<District>(this.attach_Districts), new Action<District>(this.detach_Districts));
		this._Section = default(EntityRef<Section>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string ProvinceName
	{
		get
		{
			return this._ProvinceName;
		}
		set
		{
			if ((this._ProvinceName != value))
			{
				this.OnProvinceNameChanging(value);
				this.SendPropertyChanging();
				this._ProvinceName = value;
				this.SendPropertyChanged("ProvinceName");
				this.OnProvinceNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
	public int SectionId
	{
		get
		{
			return this._SectionId;
		}
		set
		{
			if ((this._SectionId != value))
			{
				if (this._Section.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSectionIdChanging(value);
				this.SendPropertyChanging();
				this._SectionId = value;
				this.SendPropertyChanged("SectionId");
				this.OnSectionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_District", Storage="_Districts", ThisKey="Id", OtherKey="ProvinceId")]
	public EntitySet<District> Districts
	{
		get
		{
			return this._Districts;
		}
		set
		{
			this._Districts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Province", Storage="_Section", ThisKey="SectionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Section Section
	{
		get
		{
			return this._Section.Entity;
		}
		set
		{
			Section previousValue = this._Section.Entity;
			if (((previousValue != value) 
						|| (this._Section.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Section.Entity = null;
					previousValue.Provinces.Remove(this);
				}
				this._Section.Entity = value;
				if ((value != null))
				{
					value.Provinces.Add(this);
					this._SectionId = value.Id;
				}
				else
				{
					this._SectionId = default(int);
				}
				this.SendPropertyChanged("Section");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Districts(District entity)
	{
		this.SendPropertyChanging();
		entity.Province = this;
	}
	
	private void detach_Districts(District entity)
	{
		this.SendPropertyChanging();
		entity.Province = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _RegionName;
	
	private string _Description;
	
	private int _GroupId;
	
	private EntitySet<Area> _Areas;
	
	private EntitySet<SalesRegion> _SalesRegions;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
	
	public Region()
	{
		this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
		this._SalesRegions = new EntitySet<SalesRegion>(new Action<SalesRegion>(this.attach_SalesRegions), new Action<SalesRegion>(this.detach_SalesRegions));
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string RegionName
	{
		get
		{
			return this._RegionName;
		}
		set
		{
			if ((this._RegionName != value))
			{
				this.OnRegionNameChanging(value);
				this.SendPropertyChanging();
				this._RegionName = value;
				this.SendPropertyChanged("RegionName");
				this.OnRegionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
	public int GroupId
	{
		get
		{
			return this._GroupId;
		}
		set
		{
			if ((this._GroupId != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGroupIdChanging(value);
				this.SendPropertyChanging();
				this._GroupId = value;
				this.SendPropertyChanged("GroupId");
				this.OnGroupIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Area", Storage="_Areas", ThisKey="Id", OtherKey="RegionId")]
	public EntitySet<Area> Areas
	{
		get
		{
			return this._Areas;
		}
		set
		{
			this._Areas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_SalesRegion", Storage="_SalesRegions", ThisKey="Id", OtherKey="RegionId")]
	public EntitySet<SalesRegion> SalesRegions
	{
		get
		{
			return this._SalesRegions;
		}
		set
		{
			this._SalesRegions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Region", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.Regions.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.Regions.Add(this);
					this._GroupId = value.Id;
				}
				else
				{
					this._GroupId = default(int);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Areas(Area entity)
	{
		this.SendPropertyChanging();
		entity.Region = this;
	}
	
	private void detach_Areas(Area entity)
	{
		this.SendPropertyChanging();
		entity.Region = null;
	}
	
	private void attach_SalesRegions(SalesRegion entity)
	{
		this.SendPropertyChanging();
		entity.Region = this;
	}
	
	private void detach_SalesRegions(SalesRegion entity)
	{
		this.SendPropertyChanging();
		entity.Region = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _RoleName;
	
	private EntitySet<Salesmen> _Salesmens;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
	
	public Role()
	{
		this._Salesmens = new EntitySet<Salesmen>(new Action<Salesmen>(this.attach_Salesmens), new Action<Salesmen>(this.detach_Salesmens));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Salesmen", Storage="_Salesmens", ThisKey="Id", OtherKey="RoleId")]
	public EntitySet<Salesmen> Salesmens
	{
		get
		{
			return this._Salesmens;
		}
		set
		{
			this._Salesmens.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Salesmens(Salesmen entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_Salesmens(Salesmen entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesArea")]
public partial class SalesArea : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _SalesmenId;
	
	private int _AreaId;
	
	private EntityRef<Area> _Area;
	
	private EntityRef<Salesmen> _Salesmen;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesmenIdChanging(int value);
    partial void OnSalesmenIdChanged();
    partial void OnAreaIdChanging(int value);
    partial void OnAreaIdChanged();
    #endregion
	
	public SalesArea()
	{
		this._Area = default(EntityRef<Area>);
		this._Salesmen = default(EntityRef<Salesmen>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesmenId", DbType="Int NOT NULL")]
	public int SalesmenId
	{
		get
		{
			return this._SalesmenId;
		}
		set
		{
			if ((this._SalesmenId != value))
			{
				if (this._Salesmen.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSalesmenIdChanging(value);
				this.SendPropertyChanging();
				this._SalesmenId = value;
				this.SendPropertyChanged("SalesmenId");
				this.OnSalesmenIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="Int NOT NULL")]
	public int AreaId
	{
		get
		{
			return this._AreaId;
		}
		set
		{
			if ((this._AreaId != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAreaIdChanging(value);
				this.SendPropertyChanging();
				this._AreaId = value;
				this.SendPropertyChanged("AreaId");
				this.OnAreaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_SalesArea", Storage="_Area", ThisKey="AreaId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.SalesAreas.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.SalesAreas.Add(this);
					this._AreaId = value.Id;
				}
				else
				{
					this._AreaId = default(int);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesArea", Storage="_Salesmen", ThisKey="SalesmenId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Salesmen Salesmen
	{
		get
		{
			return this._Salesmen.Entity;
		}
		set
		{
			Salesmen previousValue = this._Salesmen.Entity;
			if (((previousValue != value) 
						|| (this._Salesmen.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Salesmen.Entity = null;
					previousValue.SalesAreas.Remove(this);
				}
				this._Salesmen.Entity = value;
				if ((value != null))
				{
					value.SalesAreas.Add(this);
					this._SalesmenId = value.Id;
				}
				else
				{
					this._SalesmenId = default(int);
				}
				this.SendPropertyChanged("Salesmen");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesGroup")]
public partial class SalesGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _SalesmenId;
	
	private int _GroupId;
	
	private EntityRef<Group> _Group;
	
	private EntityRef<Salesmen> _Salesmen;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesmenIdChanging(int value);
    partial void OnSalesmenIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
	
	public SalesGroup()
	{
		this._Group = default(EntityRef<Group>);
		this._Salesmen = default(EntityRef<Salesmen>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesmenId", DbType="Int NOT NULL")]
	public int SalesmenId
	{
		get
		{
			return this._SalesmenId;
		}
		set
		{
			if ((this._SalesmenId != value))
			{
				if (this._Salesmen.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSalesmenIdChanging(value);
				this.SendPropertyChanging();
				this._SalesmenId = value;
				this.SendPropertyChanged("SalesmenId");
				this.OnSalesmenIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
	public int GroupId
	{
		get
		{
			return this._GroupId;
		}
		set
		{
			if ((this._GroupId != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGroupIdChanging(value);
				this.SendPropertyChanging();
				this._GroupId = value;
				this.SendPropertyChanged("GroupId");
				this.OnGroupIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_SalesGroup", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.SalesGroups.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.SalesGroups.Add(this);
					this._GroupId = value.Id;
				}
				else
				{
					this._GroupId = default(int);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesGroup", Storage="_Salesmen", ThisKey="SalesmenId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Salesmen Salesmen
	{
		get
		{
			return this._Salesmen.Entity;
		}
		set
		{
			Salesmen previousValue = this._Salesmen.Entity;
			if (((previousValue != value) 
						|| (this._Salesmen.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Salesmen.Entity = null;
					previousValue.SalesGroups.Remove(this);
				}
				this._Salesmen.Entity = value;
				if ((value != null))
				{
					value.SalesGroups.Add(this);
					this._SalesmenId = value.Id;
				}
				else
				{
					this._SalesmenId = default(int);
				}
				this.SendPropertyChanged("Salesmen");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesLocal")]
public partial class SalesLocal : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _SalesmenId;
	
	private int _LocalId;
	
	private EntityRef<Local> _Local;
	
	private EntityRef<Salesmen> _Salesmen;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesmenIdChanging(int value);
    partial void OnSalesmenIdChanged();
    partial void OnLocalIdChanging(int value);
    partial void OnLocalIdChanged();
    #endregion
	
	public SalesLocal()
	{
		this._Local = default(EntityRef<Local>);
		this._Salesmen = default(EntityRef<Salesmen>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesmenId", DbType="Int NOT NULL")]
	public int SalesmenId
	{
		get
		{
			return this._SalesmenId;
		}
		set
		{
			if ((this._SalesmenId != value))
			{
				if (this._Salesmen.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSalesmenIdChanging(value);
				this.SendPropertyChanging();
				this._SalesmenId = value;
				this.SendPropertyChanged("SalesmenId");
				this.OnSalesmenIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalId", DbType="Int NOT NULL")]
	public int LocalId
	{
		get
		{
			return this._LocalId;
		}
		set
		{
			if ((this._LocalId != value))
			{
				if (this._Local.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocalIdChanging(value);
				this.SendPropertyChanging();
				this._LocalId = value;
				this.SendPropertyChanged("LocalId");
				this.OnLocalIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Local_SalesLocal", Storage="_Local", ThisKey="LocalId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Local Local
	{
		get
		{
			return this._Local.Entity;
		}
		set
		{
			Local previousValue = this._Local.Entity;
			if (((previousValue != value) 
						|| (this._Local.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Local.Entity = null;
					previousValue.SalesLocals.Remove(this);
				}
				this._Local.Entity = value;
				if ((value != null))
				{
					value.SalesLocals.Add(this);
					this._LocalId = value.Id;
				}
				else
				{
					this._LocalId = default(int);
				}
				this.SendPropertyChanged("Local");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesLocal", Storage="_Salesmen", ThisKey="SalesmenId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Salesmen Salesmen
	{
		get
		{
			return this._Salesmen.Entity;
		}
		set
		{
			Salesmen previousValue = this._Salesmen.Entity;
			if (((previousValue != value) 
						|| (this._Salesmen.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Salesmen.Entity = null;
					previousValue.SalesLocals.Remove(this);
				}
				this._Salesmen.Entity = value;
				if ((value != null))
				{
					value.SalesLocals.Add(this);
					this._SalesmenId = value.Id;
				}
				else
				{
					this._SalesmenId = default(int);
				}
				this.SendPropertyChanged("Salesmen");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salesmen")]
public partial class Salesmen : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _FullName;
	
	private string _Phone;
	
	private System.Nullable<int> _RoleId;
	
	private System.Nullable<int> _SmsQuota;
	
	private System.Nullable<int> _SmsUsed;
	
	private System.Nullable<System.DateTime> _ExpiredDate;
	
	private EntitySet<CustomerLog> _CustomerLogs;
	
	private EntitySet<SalesArea> _SalesAreas;
	
	private EntitySet<SalesGroup> _SalesGroups;
	
	private EntitySet<SalesLocal> _SalesLocals;
	
	private EntitySet<SalesRegion> _SalesRegions;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnSmsQuotaChanging(System.Nullable<int> value);
    partial void OnSmsQuotaChanged();
    partial void OnSmsUsedChanging(System.Nullable<int> value);
    partial void OnSmsUsedChanged();
    partial void OnExpiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredDateChanged();
    #endregion
	
	public Salesmen()
	{
		this._CustomerLogs = new EntitySet<CustomerLog>(new Action<CustomerLog>(this.attach_CustomerLogs), new Action<CustomerLog>(this.detach_CustomerLogs));
		this._SalesAreas = new EntitySet<SalesArea>(new Action<SalesArea>(this.attach_SalesAreas), new Action<SalesArea>(this.detach_SalesAreas));
		this._SalesGroups = new EntitySet<SalesGroup>(new Action<SalesGroup>(this.attach_SalesGroups), new Action<SalesGroup>(this.detach_SalesGroups));
		this._SalesLocals = new EntitySet<SalesLocal>(new Action<SalesLocal>(this.attach_SalesLocals), new Action<SalesLocal>(this.detach_SalesLocals));
		this._SalesRegions = new EntitySet<SalesRegion>(new Action<SalesRegion>(this.attach_SalesRegions), new Action<SalesRegion>(this.detach_SalesRegions));
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
	public System.Nullable<int> RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsQuota", DbType="Int")]
	public System.Nullable<int> SmsQuota
	{
		get
		{
			return this._SmsQuota;
		}
		set
		{
			if ((this._SmsQuota != value))
			{
				this.OnSmsQuotaChanging(value);
				this.SendPropertyChanging();
				this._SmsQuota = value;
				this.SendPropertyChanged("SmsQuota");
				this.OnSmsQuotaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsUsed", DbType="Int")]
	public System.Nullable<int> SmsUsed
	{
		get
		{
			return this._SmsUsed;
		}
		set
		{
			if ((this._SmsUsed != value))
			{
				this.OnSmsUsedChanging(value);
				this.SendPropertyChanging();
				this._SmsUsed = value;
				this.SendPropertyChanged("SmsUsed");
				this.OnSmsUsedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExpiredDate
	{
		get
		{
			return this._ExpiredDate;
		}
		set
		{
			if ((this._ExpiredDate != value))
			{
				this.OnExpiredDateChanging(value);
				this.SendPropertyChanging();
				this._ExpiredDate = value;
				this.SendPropertyChanged("ExpiredDate");
				this.OnExpiredDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_CustomerLog", Storage="_CustomerLogs", ThisKey="Id", OtherKey="ChangeBy")]
	public EntitySet<CustomerLog> CustomerLogs
	{
		get
		{
			return this._CustomerLogs;
		}
		set
		{
			this._CustomerLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesArea", Storage="_SalesAreas", ThisKey="Id", OtherKey="SalesmenId")]
	public EntitySet<SalesArea> SalesAreas
	{
		get
		{
			return this._SalesAreas;
		}
		set
		{
			this._SalesAreas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesGroup", Storage="_SalesGroups", ThisKey="Id", OtherKey="SalesmenId")]
	public EntitySet<SalesGroup> SalesGroups
	{
		get
		{
			return this._SalesGroups;
		}
		set
		{
			this._SalesGroups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesLocal", Storage="_SalesLocals", ThisKey="Id", OtherKey="SalesmenId")]
	public EntitySet<SalesLocal> SalesLocals
	{
		get
		{
			return this._SalesLocals;
		}
		set
		{
			this._SalesLocals.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesRegion", Storage="_SalesRegions", ThisKey="Id", OtherKey="SalesmenId")]
	public EntitySet<SalesRegion> SalesRegions
	{
		get
		{
			return this._SalesRegions;
		}
		set
		{
			this._SalesRegions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Salesmen", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.Salesmens.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.Salesmens.Add(this);
					this._RoleId = value.Id;
				}
				else
				{
					this._RoleId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = this;
	}
	
	private void detach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = null;
	}
	
	private void attach_SalesAreas(SalesArea entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = this;
	}
	
	private void detach_SalesAreas(SalesArea entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = null;
	}
	
	private void attach_SalesGroups(SalesGroup entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = this;
	}
	
	private void detach_SalesGroups(SalesGroup entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = null;
	}
	
	private void attach_SalesLocals(SalesLocal entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = this;
	}
	
	private void detach_SalesLocals(SalesLocal entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = null;
	}
	
	private void attach_SalesRegions(SalesRegion entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = this;
	}
	
	private void detach_SalesRegions(SalesRegion entity)
	{
		this.SendPropertyChanging();
		entity.Salesmen = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesRegion")]
public partial class SalesRegion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _SalesmenId;
	
	private int _RegionId;
	
	private EntityRef<Region> _Region;
	
	private EntityRef<Salesmen> _Salesmen;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesmenIdChanging(int value);
    partial void OnSalesmenIdChanged();
    partial void OnRegionIdChanging(int value);
    partial void OnRegionIdChanged();
    #endregion
	
	public SalesRegion()
	{
		this._Region = default(EntityRef<Region>);
		this._Salesmen = default(EntityRef<Salesmen>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesmenId", DbType="Int NOT NULL")]
	public int SalesmenId
	{
		get
		{
			return this._SalesmenId;
		}
		set
		{
			if ((this._SalesmenId != value))
			{
				if (this._Salesmen.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSalesmenIdChanging(value);
				this.SendPropertyChanging();
				this._SalesmenId = value;
				this.SendPropertyChanged("SalesmenId");
				this.OnSalesmenIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionId", DbType="Int NOT NULL")]
	public int RegionId
	{
		get
		{
			return this._RegionId;
		}
		set
		{
			if ((this._RegionId != value))
			{
				if (this._Region.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRegionIdChanging(value);
				this.SendPropertyChanging();
				this._RegionId = value;
				this.SendPropertyChanged("RegionId");
				this.OnRegionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_SalesRegion", Storage="_Region", ThisKey="RegionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Region Region
	{
		get
		{
			return this._Region.Entity;
		}
		set
		{
			Region previousValue = this._Region.Entity;
			if (((previousValue != value) 
						|| (this._Region.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Region.Entity = null;
					previousValue.SalesRegions.Remove(this);
				}
				this._Region.Entity = value;
				if ((value != null))
				{
					value.SalesRegions.Add(this);
					this._RegionId = value.Id;
				}
				else
				{
					this._RegionId = default(int);
				}
				this.SendPropertyChanged("Region");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salesmen_SalesRegion", Storage="_Salesmen", ThisKey="SalesmenId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Salesmen Salesmen
	{
		get
		{
			return this._Salesmen.Entity;
		}
		set
		{
			Salesmen previousValue = this._Salesmen.Entity;
			if (((previousValue != value) 
						|| (this._Salesmen.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Salesmen.Entity = null;
					previousValue.SalesRegions.Remove(this);
				}
				this._Salesmen.Entity = value;
				if ((value != null))
				{
					value.SalesRegions.Add(this);
					this._SalesmenId = value.Id;
				}
				else
				{
					this._SalesmenId = default(int);
				}
				this.SendPropertyChanged("Salesmen");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _SectionName;
	
	private EntitySet<Province> _Provinces;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    #endregion
	
	public Section()
	{
		this._Provinces = new EntitySet<Province>(new Action<Province>(this.attach_Provinces), new Action<Province>(this.detach_Provinces));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string SectionName
	{
		get
		{
			return this._SectionName;
		}
		set
		{
			if ((this._SectionName != value))
			{
				this.OnSectionNameChanging(value);
				this.SendPropertyChanging();
				this._SectionName = value;
				this.SendPropertyChanged("SectionName");
				this.OnSectionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_Province", Storage="_Provinces", ThisKey="Id", OtherKey="SectionId")]
	public EntitySet<Province> Provinces
	{
		get
		{
			return this._Provinces;
		}
		set
		{
			this._Provinces.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Provinces(Province entity)
	{
		this.SendPropertyChanging();
		entity.Section = this;
	}
	
	private void detach_Provinces(Province entity)
	{
		this.SendPropertyChanging();
		entity.Section = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SmsType")]
public partial class SmsType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Syntax;
	
	private EntitySet<SmsObj> _SmsObjs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSyntaxChanging(string value);
    partial void OnSyntaxChanged();
    #endregion
	
	public SmsType()
	{
		this._SmsObjs = new EntitySet<SmsObj>(new Action<SmsObj>(this.attach_SmsObjs), new Action<SmsObj>(this.detach_SmsObjs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Syntax", DbType="NVarChar(MAX)")]
	public string Syntax
	{
		get
		{
			return this._Syntax;
		}
		set
		{
			if ((this._Syntax != value))
			{
				this.OnSyntaxChanging(value);
				this.SendPropertyChanging();
				this._Syntax = value;
				this.SendPropertyChanged("Syntax");
				this.OnSyntaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmsType_SmsObj", Storage="_SmsObjs", ThisKey="Id", OtherKey="SmsTypeId")]
	public EntitySet<SmsObj> SmsObjs
	{
		get
		{
			return this._SmsObjs;
		}
		set
		{
			this._SmsObjs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SmsObjs(SmsObj entity)
	{
		this.SendPropertyChanging();
		entity.SmsType = this;
	}
	
	private void detach_SmsObjs(SmsObj entity)
	{
		this.SendPropertyChanging();
		entity.SmsType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupervisorManageCustomer")]
public partial class SupervisorManageCustomer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<int> _CustomerId;
	
	private System.Nullable<int> _SupervisorId;
	
	private EntityRef<CustomerSupervisor> _CustomerSupervisor;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnSupervisorIdChanging(System.Nullable<int> value);
    partial void OnSupervisorIdChanged();
    #endregion
	
	public SupervisorManageCustomer()
	{
		this._CustomerSupervisor = default(EntityRef<CustomerSupervisor>);
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
	public System.Nullable<int> CustomerId
	{
		get
		{
			return this._CustomerId;
		}
		set
		{
			if ((this._CustomerId != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerId = value;
				this.SendPropertyChanged("CustomerId");
				this.OnCustomerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupervisorId", DbType="Int")]
	public System.Nullable<int> SupervisorId
	{
		get
		{
			return this._SupervisorId;
		}
		set
		{
			if ((this._SupervisorId != value))
			{
				if (this._CustomerSupervisor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSupervisorIdChanging(value);
				this.SendPropertyChanging();
				this._SupervisorId = value;
				this.SendPropertyChanged("SupervisorId");
				this.OnSupervisorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerSupervisor_SupervisorManageCustomer", Storage="_CustomerSupervisor", ThisKey="SupervisorId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
	public CustomerSupervisor CustomerSupervisor
	{
		get
		{
			return this._CustomerSupervisor.Entity;
		}
		set
		{
			CustomerSupervisor previousValue = this._CustomerSupervisor.Entity;
			if (((previousValue != value) 
						|| (this._CustomerSupervisor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CustomerSupervisor.Entity = null;
					previousValue.SupervisorManageCustomers.Remove(this);
				}
				this._CustomerSupervisor.Entity = value;
				if ((value != null))
				{
					value.SupervisorManageCustomers.Add(this);
					this._SupervisorId = value.Id;
				}
				else
				{
					this._SupervisorId = default(Nullable<int>);
				}
				this.SendPropertyChanged("CustomerSupervisor");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_SupervisorManageCustomer", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.SupervisorManageCustomers.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.SupervisorManageCustomers.Add(this);
					this._CustomerId = value.Id;
				}
				else
				{
					this._CustomerId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchedulePromotion")]
public partial class SchedulePromotion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _Title;
	
	private string _SMSContent;
	
	private string _WebContent;
	
	private System.Nullable<System.DateTime> _StartDate;
	
	private System.Nullable<System.DateTime> _EndDate;
	
	private System.Nullable<int> _AdministratorId;
	
	private System.Nullable<bool> _IsApprove;
	
	private string _PhoneNumbers;
	
	private string _SMSIdList;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSMSContentChanging(string value);
    partial void OnSMSContentChanged();
    partial void OnWebContentChanging(string value);
    partial void OnWebContentChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnAdministratorIdChanging(System.Nullable<int> value);
    partial void OnAdministratorIdChanged();
    partial void OnIsApproveChanging(System.Nullable<bool> value);
    partial void OnIsApproveChanged();
    partial void OnPhoneNumbersChanging(string value);
    partial void OnPhoneNumbersChanged();
    partial void OnSMSIdListChanging(string value);
    partial void OnSMSIdListChanged();
    #endregion
	
	public SchedulePromotion()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string SMSContent
	{
		get
		{
			return this._SMSContent;
		}
		set
		{
			if ((this._SMSContent != value))
			{
				this.OnSMSContentChanging(value);
				this.SendPropertyChanging();
				this._SMSContent = value;
				this.SendPropertyChanged("SMSContent");
				this.OnSMSContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string WebContent
	{
		get
		{
			return this._WebContent;
		}
		set
		{
			if ((this._WebContent != value))
			{
				this.OnWebContentChanging(value);
				this.SendPropertyChanging();
				this._WebContent = value;
				this.SendPropertyChanged("WebContent");
				this.OnWebContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorId", DbType="Int")]
	public System.Nullable<int> AdministratorId
	{
		get
		{
			return this._AdministratorId;
		}
		set
		{
			if ((this._AdministratorId != value))
			{
				this.OnAdministratorIdChanging(value);
				this.SendPropertyChanging();
				this._AdministratorId = value;
				this.SendPropertyChanged("AdministratorId");
				this.OnAdministratorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApprove", DbType="Bit")]
	public System.Nullable<bool> IsApprove
	{
		get
		{
			return this._IsApprove;
		}
		set
		{
			if ((this._IsApprove != value))
			{
				this.OnIsApproveChanging(value);
				this.SendPropertyChanging();
				this._IsApprove = value;
				this.SendPropertyChanged("IsApprove");
				this.OnIsApproveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumbers", DbType="NVarChar(MAX)")]
	public string PhoneNumbers
	{
		get
		{
			return this._PhoneNumbers;
		}
		set
		{
			if ((this._PhoneNumbers != value))
			{
				this.OnPhoneNumbersChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumbers = value;
				this.SendPropertyChanged("PhoneNumbers");
				this.OnPhoneNumbersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSIdList", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string SMSIdList
	{
		get
		{
			return this._SMSIdList;
		}
		set
		{
			if ((this._SMSIdList != value))
			{
				this.OnSMSIdListChanging(value);
				this.SendPropertyChanging();
				this._SMSIdList = value;
				this.SendPropertyChanged("SMSIdList");
				this.OnSMSIdListChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Promotion")]
public partial class Promotion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _Title;
	
	private string _Content;
	
	private System.Nullable<System.DateTime> _StartDate;
	
	private System.Nullable<System.DateTime> _EndDate;
	
	private System.Nullable<int> _AdministratorId;
	
	private EntityRef<Administrator> _Administrator;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnAdministratorIdChanging(System.Nullable<int> value);
    partial void OnAdministratorIdChanged();
    #endregion
	
	public Promotion()
	{
		this._Administrator = default(EntityRef<Administrator>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorId", DbType="Int")]
	public System.Nullable<int> AdministratorId
	{
		get
		{
			return this._AdministratorId;
		}
		set
		{
			if ((this._AdministratorId != value))
			{
				if (this._Administrator.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAdministratorIdChanging(value);
				this.SendPropertyChanging();
				this._AdministratorId = value;
				this.SendPropertyChanged("AdministratorId");
				this.OnAdministratorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrator_Promotion", Storage="_Administrator", ThisKey="AdministratorId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Administrator Administrator
	{
		get
		{
			return this._Administrator.Entity;
		}
		set
		{
			Administrator previousValue = this._Administrator.Entity;
			if (((previousValue != value) 
						|| (this._Administrator.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Administrator.Entity = null;
					previousValue.Promotions.Remove(this);
				}
				this._Administrator.Entity = value;
				if ((value != null))
				{
					value.Promotions.Add(this);
					this._AdministratorId = value.Id;
				}
				else
				{
					this._AdministratorId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Administrator");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SmsObj")]
public partial class SmsObj : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _SMSCode;
	
	private string _SenderNumber;
	
	private string _ReceiverNumber;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Subject;
	
	private string _Content;
	
	private bool _IsSendSuccess;
	
	private bool _IsRead;
	
	private bool _IsDeleted;
	
	private System.Nullable<int> _SmsTypeId;
	
	private System.Nullable<int> _PromotionId;
	
	private System.Nullable<int> _SenderType;
	
	private System.Nullable<int> _ReceiverType;
	
	private System.Nullable<int> _ParentSmsId;
	
	private EntityRef<SmsType> _SmsType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSMSCodeChanging(string value);
    partial void OnSMSCodeChanged();
    partial void OnSenderNumberChanging(string value);
    partial void OnSenderNumberChanged();
    partial void OnReceiverNumberChanging(string value);
    partial void OnReceiverNumberChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsSendSuccessChanging(bool value);
    partial void OnIsSendSuccessChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnSmsTypeIdChanging(System.Nullable<int> value);
    partial void OnSmsTypeIdChanged();
    partial void OnPromotionIdChanging(System.Nullable<int> value);
    partial void OnPromotionIdChanged();
    partial void OnSenderTypeChanging(System.Nullable<int> value);
    partial void OnSenderTypeChanged();
    partial void OnReceiverTypeChanging(System.Nullable<int> value);
    partial void OnReceiverTypeChanged();
    partial void OnParentSmsIdChanging(System.Nullable<int> value);
    partial void OnParentSmsIdChanged();
    #endregion
	
	public SmsObj()
	{
		this._SmsType = default(EntityRef<SmsType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSCode", DbType="VarChar(100)")]
	public string SMSCode
	{
		get
		{
			return this._SMSCode;
		}
		set
		{
			if ((this._SMSCode != value))
			{
				this.OnSMSCodeChanging(value);
				this.SendPropertyChanging();
				this._SMSCode = value;
				this.SendPropertyChanged("SMSCode");
				this.OnSMSCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderNumber", DbType="VarChar(50)")]
	public string SenderNumber
	{
		get
		{
			return this._SenderNumber;
		}
		set
		{
			if ((this._SenderNumber != value))
			{
				this.OnSenderNumberChanging(value);
				this.SendPropertyChanging();
				this._SenderNumber = value;
				this.SendPropertyChanged("SenderNumber");
				this.OnSenderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNumber", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string ReceiverNumber
	{
		get
		{
			return this._ReceiverNumber;
		}
		set
		{
			if ((this._ReceiverNumber != value))
			{
				this.OnReceiverNumberChanging(value);
				this.SendPropertyChanging();
				this._ReceiverNumber = value;
				this.SendPropertyChanged("ReceiverNumber");
				this.OnReceiverNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX)")]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSendSuccess", DbType="Bit NOT NULL")]
	public bool IsSendSuccess
	{
		get
		{
			return this._IsSendSuccess;
		}
		set
		{
			if ((this._IsSendSuccess != value))
			{
				this.OnIsSendSuccessChanging(value);
				this.SendPropertyChanging();
				this._IsSendSuccess = value;
				this.SendPropertyChanged("IsSendSuccess");
				this.OnIsSendSuccessChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
	public bool IsRead
	{
		get
		{
			return this._IsRead;
		}
		set
		{
			if ((this._IsRead != value))
			{
				this.OnIsReadChanging(value);
				this.SendPropertyChanging();
				this._IsRead = value;
				this.SendPropertyChanged("IsRead");
				this.OnIsReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
	public bool IsDeleted
	{
		get
		{
			return this._IsDeleted;
		}
		set
		{
			if ((this._IsDeleted != value))
			{
				this.OnIsDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsDeleted = value;
				this.SendPropertyChanged("IsDeleted");
				this.OnIsDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsTypeId", DbType="Int")]
	public System.Nullable<int> SmsTypeId
	{
		get
		{
			return this._SmsTypeId;
		}
		set
		{
			if ((this._SmsTypeId != value))
			{
				if (this._SmsType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSmsTypeIdChanging(value);
				this.SendPropertyChanging();
				this._SmsTypeId = value;
				this.SendPropertyChanged("SmsTypeId");
				this.OnSmsTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PromotionId", DbType="Int")]
	public System.Nullable<int> PromotionId
	{
		get
		{
			return this._PromotionId;
		}
		set
		{
			if ((this._PromotionId != value))
			{
				this.OnPromotionIdChanging(value);
				this.SendPropertyChanging();
				this._PromotionId = value;
				this.SendPropertyChanged("PromotionId");
				this.OnPromotionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderType", DbType="Int")]
	public System.Nullable<int> SenderType
	{
		get
		{
			return this._SenderType;
		}
		set
		{
			if ((this._SenderType != value))
			{
				this.OnSenderTypeChanging(value);
				this.SendPropertyChanging();
				this._SenderType = value;
				this.SendPropertyChanged("SenderType");
				this.OnSenderTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverType", DbType="Int")]
	public System.Nullable<int> ReceiverType
	{
		get
		{
			return this._ReceiverType;
		}
		set
		{
			if ((this._ReceiverType != value))
			{
				this.OnReceiverTypeChanging(value);
				this.SendPropertyChanging();
				this._ReceiverType = value;
				this.SendPropertyChanged("ReceiverType");
				this.OnReceiverTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentSmsId", DbType="Int")]
	public System.Nullable<int> ParentSmsId
	{
		get
		{
			return this._ParentSmsId;
		}
		set
		{
			if ((this._ParentSmsId != value))
			{
				this.OnParentSmsIdChanging(value);
				this.SendPropertyChanging();
				this._ParentSmsId = value;
				this.SendPropertyChanged("ParentSmsId");
				this.OnParentSmsIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SmsType_SmsObj", Storage="_SmsType", ThisKey="SmsTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public SmsType SmsType
	{
		get
		{
			return this._SmsType.Entity;
		}
		set
		{
			SmsType previousValue = this._SmsType.Entity;
			if (((previousValue != value) 
						|| (this._SmsType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SmsType.Entity = null;
					previousValue.SmsObjs.Remove(this);
				}
				this._SmsType.Entity = value;
				if ((value != null))
				{
					value.SmsObjs.Add(this);
					this._SmsTypeId = value.Id;
				}
				else
				{
					this._SmsTypeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("SmsType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dashboard")]
public partial class Dashboard : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Title;
	
	private string _Content;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<System.DateTime> _UpdateDate;
	
	private string _SenderPhoneNumber;
	
	private string _ReceiverPhoneNumber;
	
	private System.Nullable<bool> _IsDeleted;
	
	private System.Nullable<bool> _IsRead;
	
	private string _AttachedFileName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnSenderPhoneNumberChanging(string value);
    partial void OnSenderPhoneNumberChanged();
    partial void OnReceiverPhoneNumberChanging(string value);
    partial void OnReceiverPhoneNumberChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    partial void OnAttachedFileNameChanging(string value);
    partial void OnAttachedFileNameChanged();
    #endregion
	
	public Dashboard()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Content
	{
		get
		{
			return this._Content;
		}
		set
		{
			if ((this._Content != value))
			{
				this.OnContentChanging(value);
				this.SendPropertyChanging();
				this._Content = value;
				this.SendPropertyChanged("Content");
				this.OnContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> UpdateDate
	{
		get
		{
			return this._UpdateDate;
		}
		set
		{
			if ((this._UpdateDate != value))
			{
				this.OnUpdateDateChanging(value);
				this.SendPropertyChanging();
				this._UpdateDate = value;
				this.SendPropertyChanged("UpdateDate");
				this.OnUpdateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderPhoneNumber", DbType="NVarChar(MAX)")]
	public string SenderPhoneNumber
	{
		get
		{
			return this._SenderPhoneNumber;
		}
		set
		{
			if ((this._SenderPhoneNumber != value))
			{
				this.OnSenderPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._SenderPhoneNumber = value;
				this.SendPropertyChanged("SenderPhoneNumber");
				this.OnSenderPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverPhoneNumber", DbType="NVarChar(MAX)")]
	public string ReceiverPhoneNumber
	{
		get
		{
			return this._ReceiverPhoneNumber;
		}
		set
		{
			if ((this._ReceiverPhoneNumber != value))
			{
				this.OnReceiverPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._ReceiverPhoneNumber = value;
				this.SendPropertyChanged("ReceiverPhoneNumber");
				this.OnReceiverPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
	public System.Nullable<bool> IsDeleted
	{
		get
		{
			return this._IsDeleted;
		}
		set
		{
			if ((this._IsDeleted != value))
			{
				this.OnIsDeletedChanging(value);
				this.SendPropertyChanging();
				this._IsDeleted = value;
				this.SendPropertyChanged("IsDeleted");
				this.OnIsDeletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit")]
	public System.Nullable<bool> IsRead
	{
		get
		{
			return this._IsRead;
		}
		set
		{
			if ((this._IsRead != value))
			{
				this.OnIsReadChanging(value);
				this.SendPropertyChanging();
				this._IsRead = value;
				this.SendPropertyChanged("IsRead");
				this.OnIsReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachedFileName", DbType="NVarChar(400)")]
	public string AttachedFileName
	{
		get
		{
			return this._AttachedFileName;
		}
		set
		{
			if ((this._AttachedFileName != value))
			{
				this.OnAttachedFileNameChanging(value);
				this.SendPropertyChanging();
				this._AttachedFileName = value;
				this.SendPropertyChanged("AttachedFileName");
				this.OnAttachedFileNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UpiCode;
	
	private string _FullName;
	
	private string _Address;
	
	private string _Street;
	
	private string _Ward;
	
	private string _Phone;
	
	private string _Password;
	
	private System.Nullable<int> _CustomerTypeId;
	
	private System.Nullable<int> _ChannelId;
	
	private System.Nullable<int> _DistrictId;
	
	private System.Nullable<int> _LocalId;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<System.DateTime> _UpdateDate;
	
	private System.Nullable<bool> _Status;
	
	private System.Nullable<bool> _IsEnable;
	
	private System.Nullable<System.DateTime> _LastLoggedDate;
	
	private System.Nullable<int> _UsedSMS;
	
	private EntitySet<CustomerLog> _CustomerLogs;
	
	private EntitySet<CustomerSupervisor> _CustomerSupervisors;
	
	private EntitySet<SupervisorManageCustomer> _SupervisorManageCustomers;
	
	private EntityRef<Channel> _Channel;
	
	private EntityRef<CustomerType> _CustomerType;
	
	private EntityRef<District> _District;
	
	private EntityRef<Local> _Local;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUpiCodeChanging(string value);
    partial void OnUpiCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnWardChanging(string value);
    partial void OnWardChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCustomerTypeIdChanging(System.Nullable<int> value);
    partial void OnCustomerTypeIdChanged();
    partial void OnChannelIdChanging(System.Nullable<int> value);
    partial void OnChannelIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<int> value);
    partial void OnDistrictIdChanged();
    partial void OnLocalIdChanging(System.Nullable<int> value);
    partial void OnLocalIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnIsEnableChanging(System.Nullable<bool> value);
    partial void OnIsEnableChanged();
    partial void OnLastLoggedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoggedDateChanged();
    partial void OnUsedSMSChanging(System.Nullable<int> value);
    partial void OnUsedSMSChanged();
    #endregion
	
	public Customer()
	{
		this._CustomerLogs = new EntitySet<CustomerLog>(new Action<CustomerLog>(this.attach_CustomerLogs), new Action<CustomerLog>(this.detach_CustomerLogs));
		this._CustomerSupervisors = new EntitySet<CustomerSupervisor>(new Action<CustomerSupervisor>(this.attach_CustomerSupervisors), new Action<CustomerSupervisor>(this.detach_CustomerSupervisors));
		this._SupervisorManageCustomers = new EntitySet<SupervisorManageCustomer>(new Action<SupervisorManageCustomer>(this.attach_SupervisorManageCustomers), new Action<SupervisorManageCustomer>(this.detach_SupervisorManageCustomers));
		this._Channel = default(EntityRef<Channel>);
		this._CustomerType = default(EntityRef<CustomerType>);
		this._District = default(EntityRef<District>);
		this._Local = default(EntityRef<Local>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this.OnUpiCodeChanging(value);
				this.SendPropertyChanging();
				this._UpiCode = value;
				this.SendPropertyChanged("UpiCode");
				this.OnUpiCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(255)")]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward", DbType="NVarChar(255)")]
	public string Ward
	{
		get
		{
			return this._Ward;
		}
		set
		{
			if ((this._Ward != value))
			{
				this.OnWardChanging(value);
				this.SendPropertyChanging();
				this._Ward = value;
				this.SendPropertyChanged("Ward");
				this.OnWardChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTypeId", DbType="Int")]
	public System.Nullable<int> CustomerTypeId
	{
		get
		{
			return this._CustomerTypeId;
		}
		set
		{
			if ((this._CustomerTypeId != value))
			{
				if (this._CustomerType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerTypeIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerTypeId = value;
				this.SendPropertyChanged("CustomerTypeId");
				this.OnCustomerTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelId", DbType="Int")]
	public System.Nullable<int> ChannelId
	{
		get
		{
			return this._ChannelId;
		}
		set
		{
			if ((this._ChannelId != value))
			{
				if (this._Channel.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChannelIdChanging(value);
				this.SendPropertyChanging();
				this._ChannelId = value;
				this.SendPropertyChanged("ChannelId");
				this.OnChannelIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int")]
	public System.Nullable<int> DistrictId
	{
		get
		{
			return this._DistrictId;
		}
		set
		{
			if ((this._DistrictId != value))
			{
				if (this._District.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDistrictIdChanging(value);
				this.SendPropertyChanging();
				this._DistrictId = value;
				this.SendPropertyChanged("DistrictId");
				this.OnDistrictIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalId", DbType="Int")]
	public System.Nullable<int> LocalId
	{
		get
		{
			return this._LocalId;
		}
		set
		{
			if ((this._LocalId != value))
			{
				if (this._Local.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLocalIdChanging(value);
				this.SendPropertyChanging();
				this._LocalId = value;
				this.SendPropertyChanged("LocalId");
				this.OnLocalIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> UpdateDate
	{
		get
		{
			return this._UpdateDate;
		}
		set
		{
			if ((this._UpdateDate != value))
			{
				this.OnUpdateDateChanging(value);
				this.SendPropertyChanging();
				this._UpdateDate = value;
				this.SendPropertyChanged("UpdateDate");
				this.OnUpdateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
	public System.Nullable<bool> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnable", DbType="Bit")]
	public System.Nullable<bool> IsEnable
	{
		get
		{
			return this._IsEnable;
		}
		set
		{
			if ((this._IsEnable != value))
			{
				this.OnIsEnableChanging(value);
				this.SendPropertyChanging();
				this._IsEnable = value;
				this.SendPropertyChanged("IsEnable");
				this.OnIsEnableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoggedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastLoggedDate
	{
		get
		{
			return this._LastLoggedDate;
		}
		set
		{
			if ((this._LastLoggedDate != value))
			{
				this.OnLastLoggedDateChanging(value);
				this.SendPropertyChanging();
				this._LastLoggedDate = value;
				this.SendPropertyChanged("LastLoggedDate");
				this.OnLastLoggedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsedSMS", DbType="Int")]
	public System.Nullable<int> UsedSMS
	{
		get
		{
			return this._UsedSMS;
		}
		set
		{
			if ((this._UsedSMS != value))
			{
				this.OnUsedSMSChanging(value);
				this.SendPropertyChanging();
				this._UsedSMS = value;
				this.SendPropertyChanged("UsedSMS");
				this.OnUsedSMSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerLog", Storage="_CustomerLogs", ThisKey="Id", OtherKey="CustomerId")]
	public EntitySet<CustomerLog> CustomerLogs
	{
		get
		{
			return this._CustomerLogs;
		}
		set
		{
			this._CustomerLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerSupervisor", Storage="_CustomerSupervisors", ThisKey="Id", OtherKey="CustomerId")]
	public EntitySet<CustomerSupervisor> CustomerSupervisors
	{
		get
		{
			return this._CustomerSupervisors;
		}
		set
		{
			this._CustomerSupervisors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_SupervisorManageCustomer", Storage="_SupervisorManageCustomers", ThisKey="Id", OtherKey="CustomerId")]
	public EntitySet<SupervisorManageCustomer> SupervisorManageCustomers
	{
		get
		{
			return this._SupervisorManageCustomers;
		}
		set
		{
			this._SupervisorManageCustomers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Channel_Customer", Storage="_Channel", ThisKey="ChannelId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Channel Channel
	{
		get
		{
			return this._Channel.Entity;
		}
		set
		{
			Channel previousValue = this._Channel.Entity;
			if (((previousValue != value) 
						|| (this._Channel.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Channel.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._Channel.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._ChannelId = value.Id;
				}
				else
				{
					this._ChannelId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Channel");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_Customer", Storage="_CustomerType", ThisKey="CustomerTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public CustomerType CustomerType
	{
		get
		{
			return this._CustomerType.Entity;
		}
		set
		{
			CustomerType previousValue = this._CustomerType.Entity;
			if (((previousValue != value) 
						|| (this._CustomerType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CustomerType.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._CustomerType.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._CustomerTypeId = value.Id;
				}
				else
				{
					this._CustomerTypeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("CustomerType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Customer", Storage="_District", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public District District
	{
		get
		{
			return this._District.Entity;
		}
		set
		{
			District previousValue = this._District.Entity;
			if (((previousValue != value) 
						|| (this._District.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._District.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._District.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._DistrictId = value.Id;
				}
				else
				{
					this._DistrictId = default(Nullable<int>);
				}
				this.SendPropertyChanged("District");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Local_Customer", Storage="_Local", ThisKey="LocalId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
	public Local Local
	{
		get
		{
			return this._Local.Entity;
		}
		set
		{
			Local previousValue = this._Local.Entity;
			if (((previousValue != value) 
						|| (this._Local.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Local.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._Local.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._LocalId = value.Id;
				}
				else
				{
					this._LocalId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Local");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_CustomerLogs(CustomerLog entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
	
	private void attach_CustomerSupervisors(CustomerSupervisor entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_CustomerSupervisors(CustomerSupervisor entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
	
	private void attach_SupervisorManageCustomers(SupervisorManageCustomer entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_SupervisorManageCustomers(SupervisorManageCustomer entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

public partial class SP_SchedulePromotionResult
{
	
	private string _CustomerName;
	
	private string _UpiCode;
	
	private string _Phone;
	
	private string _FullName;
	
	private string _PositionName;
	
	public SP_SchedulePromotionResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this._CustomerName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpiCode", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UpiCode
	{
		get
		{
			return this._UpiCode;
		}
		set
		{
			if ((this._UpiCode != value))
			{
				this._UpiCode = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this._Phone = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255)")]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this._FullName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(MAX)")]
	public string PositionName
	{
		get
		{
			return this._PositionName;
		}
		set
		{
			if ((this._PositionName != value))
			{
				this._PositionName = value;
			}
		}
	}
}
#pragma warning restore 1591
