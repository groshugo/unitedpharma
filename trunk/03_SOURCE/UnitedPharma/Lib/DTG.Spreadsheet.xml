<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DTG.Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:DTG.Spreadsheet.SectorCollection">
            <summary>
            Keeps an array of sectors, each is 512 bytes.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.SectorCollection.SectorList">
            The class contains all ExemplarSector.
        </member>
        <member name="M:DTG.Spreadsheet.SectorCollection.#ctor">
            Constructor.
        </member>
        <member name="M:DTG.Spreadsheet.SectorCollection.Add(DTG.Spreadsheet.Sector)">
            Add new sector to array list.
            <param name="ExempSect">new sector</param>
        </member>
        <member name="P:DTG.Spreadsheet.SectorCollection.Item(System.Int32)">
            Represents the class as an arraylist with indexer.
        </member>
        <member name="P:DTG.Spreadsheet.SectorCollection.Count">
            Returns the count of sectors.
        </member>
        <member name="T:DTG.Spreadsheet.GenericBiff">
            <summary>
            This class abstracts a Generic Microsoft (MS) Binary Interchange File Format (BIFF) record.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.GenericBiff.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of class GenericBiff.
            </summary>
            <param name="InputStream">The stream to read the record data from.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.GenericBiff.GetDataStream">
            <summary>
            Returns a stream for the data in the BIFF record.
            </summary>
            <returns>Returns a stream for the data in the BIFF record.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.DBCellCollection">
            <summary>
            Table of DBCell records.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DBCellCollection.#ctor">
            <summary>
            Initializes a new instance of class DBCellCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DBCellCollection.AddDBCell(DTG.Spreadsheet.DBCell)">
            <summary>
            Adds the specified DBCell in the end of the DBCellCollection.
            </summary>
            <param name="NewDBCell">The DBCell to be added to the end of the DBCellCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.DBCellCollection.Clear">
            <summary>
            Removes all elements of the DBCellCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DBCellCollection.Item(System.Int32)">
            <summary>
            Gets the DBCell with the specified index.
            </summary>
            <param name="Index">The zero-based index of the DBCellCollection.</param>
            <returns>The DBCell at the specified index of the DBCellCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.DBCellCollection.Count">
            <summary>
            Gets the number of elements contained in the DBCellCollection.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.DefinedStyleCollection">
            <summary>
            Table of DefinedStyle records.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DefinedStyleCollection.#ctor">
            <summary>
            Initializes a new instance of the DefinedStyleCollection class that is empty.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DefinedStyleCollection.AddStyle(DTG.Spreadsheet.DefinedStyle)">
            <summary>
            Adds the specified DefinedStyle in the DefinedStyleCollection.
            </summary>
            <param name="NewStyle">The Style to be added to the DefinedStyleCollection.</param>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedStyleCollection.Item(System.Int32)">
            <summary>
            Gets the DefinedStyle with the specified index.
            </summary>
            <param name="index">The zero-based index of the DefinedStyleCollection.</param>
            <returns>The Style at the specified index of the DefinedStyleCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedStyleCollection.Count">
            <summary>
            Gets the number of elements contained in the DefinedStyleCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedStyleCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.BLANK">
            <summary>
            Blank record (0x0201) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BLANK.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class BLANK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the BLANK record.</param>
            <exception>
            An Exception if thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.XFRecord">
            <summary>
            Xf-record for writing to file.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.XFRecord.#ctor(DTG.Spreadsheet.XF)">
            <summary>
            Initializes a new instance of class XFRecord.
            </summary>
            <param name="Xf">The instance of class XF which the contain information of creating an instance of the class XFRecord.</param>
        </member>
        <member name="M:DTG.Spreadsheet.XFRecord.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.BoundSheet">
            <summary>
            A BoundSheet record is written for each sheet. It stores the sheet name and stream offset to the BOF record from the ExcelWorkbook stream.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BoundSheet.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of the class BoundSheet.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the BoundSheet record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.BoundSheet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BoundSheet class that is empty.
            </summary>
            <param name="BoundSheetName">Name of BoundSheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.BoundSheet.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.BoundSheet.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellBorder">
            <summary>
            Contains settings of ExcelCell border lines.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.#ctor(DTG.Spreadsheet.XF,DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Initializes a new instance of class ExcelCellBorder.
            </summary>
            <param name="Xf">XF record for ExcelCell.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.#ctor(DTG.Spreadsheet.ExcelCellBorder,DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Initializes a new instance of the class ExcelCellBorder on base of an existing ExcelCellBorder.
            </summary>
            <param name="Prototip">The existing ExcelCellBorder from which the new ExcelCellBorder is created.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.GetMergedCell(System.Int32@,System.Int32@)">
            <summary>
            Returns list of BasicExcelCell which contains in merged.
            </summary>
            <param name="NumOfRow">Number of ExcelRow in merged.</param>
            <param name="NumOfColumn">Number of ExcelColumn in merged.</param>
            <returns>List of BasicExcelCell.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.op_Equality(DTG.Spreadsheet.ExcelCellBorder,DTG.Spreadsheet.ExcelCellBorder)">
            <summary>
            Equals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.op_Inequality(DTG.Spreadsheet.ExcelCellBorder,DTG.Spreadsheet.ExcelCellBorder)">
            <summary>
            UnEquals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current ExcelCellBorder.
            </summary>
            <param name="obj">The Object to compare with the current ExcelCellBorder.</param>
            <returns>True if the specified Object is equal to the current RichTextString; otherwise, false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellBorder.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current ExcelCellBorder.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.LeftLineColor">
            <summary>
            Gets or sets a color of the left line.
            <remarks>There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.LeftLineStyle">
            <summary>
            Gets or sets a style of the left line.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.RightLineColor">
            <summary>
            Gets or sets a color of the right line.
            <remarks>There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.RightLineStyle">
            <summary>
            Gets or sets a style of the right line.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.TopLineColor">
            <summary>
            Gets or sets a color of the top line.
            <remarks>There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.TopLineStyle">
            <summary>
            Gets or sets a style of the top line.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.BottomLineColor">
            <summary>
            Gets or sets a color of the bottom line.
            <remarks>There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.BottomLineStyle">
            <summary>
            Gets or sets a style of the bottom line.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.Diagonal">
            <summary>
            Get or set a type of diagonal line.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.DiagonalLineStyle">
            <summary>
            Gets or sets a style of the diagonal line.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellBorder.DiagonalLineColor">
            <summary>
            Gets or sets a color of the right line.
            <remarks>There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.Function">
            <summary>
            Base class for classes representing supported function.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.Function._ID">
            <summary>
            Function identifier used in tFunc and tFuncVar tokens.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.Function._Name">
            <summary>
            English name of the function.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.Function._MinPar">
            <summary>
            Minimum number of parameters this function requires.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.Function._MaxPar">
            <summary>
            Maximum number of parameters this function allows. If equal to “Min par”, a tFunc token 
            is used for this function, otherwise a tFuncVar token.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.Function._RetClass">
            <summary>
            Default token class of the return value. R = reference class; V = value class; A = array class.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.Function._ParamClass">
            <summary>
            Token classes expected by the respective parameters of the function.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Function.#ctor">
            <summary>
            Initializes a new instance of class.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Function.Calculate">
            <summary>
            Calculates the value of the function.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DTG.Spreadsheet.Function.IsFuncVar">
            <summary>
            Checks whether the function of a variable number of input parameters.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.Function.NumOfArgMin">
            <summary>
            Returns a minimum number of parameters this function requires.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.Function.NumOfArgMax">
            <summary>
            Returns a maximum number of parameters this function requires.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.Function.ID">
            <summary>
            Returns a function identifier used in tFunc and tFuncVar tokens.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.Function.Name">
            <summary>
            Returns a English name of the function.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.Function.ParamClass">
            <summary>
            Returns are token classes expected by the respective parameters of the function.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.Function.RetClass">
            <summary>
            Returns a default token class of the return value
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.OperandOfFunctionException">
            <summary>
            Exception is thrown when calculating formulas.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FormulaException">
            <summary>
            Exception is thrown when processing formulas.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelException">
            <summary>
            ExcelException is the base class for exceptions thrown during use DTG.Spreedsheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:DTG.Spreadsheet.OperandOfFunctionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class OperandOfFunctionException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.OperandOfFunctionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.AddressOfCellException">
            <summary>
            Exception is thrown when calculating the address of a cell.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.AddressOfCellException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class AddressOfCellException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.AddressOfCellException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.HorizontalPageBreakCollection">
            <summary>
            Collection of horizontal page breaks (<see cref="T:DTG.Spreadsheet.HorizontalPageBreak"/>). 
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes the list of page breaks.
            </summary>
            <param name="Wsheet">The actual excel worksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet,DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of collection HorizontalPageBreakCollection.
            </summary>
            <param name="Wsheet">The actual excel worksheet.</param>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the HorizontalPageBreakCollection.</param>
            <exception>
            An ExcelDataFormatException is thrown if the record of PageBreak is invalid.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32)">
            <summary>
            Adds a new horizontal page break above the specified row. 
            </summary>
            <param name="Row">The zero-based index of the Row.</param>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page break at the specified index. 
            </summary>
            <param name="Index">The zero-based index of the page break to remove.</param>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.Remove(DTG.Spreadsheet.HorizontalPageBreak)">
            <summary>
            Removes the certain page break. 
            </summary>
            <param name="PageBreak">The instance of page break.</param>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreakCollection.GetStream">
            <summary>
            returns a stream for writting to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.HorizontalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the horizontal page break at the specified index. 
            </summary>
            <param name="Index">The zero-based index of the page break.</param>
        </member>
        <member name="P:DTG.Spreadsheet.HorizontalPageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HorizontalPageBreakCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfBorderLine">
            <summary>
            Represents the style of borderline of ExcelCell.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Thin">
            <summary>
            Thin line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Medium">
            <summary>
            Medium line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Dashed">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Dotted">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Thick">
            <summary>
            Thick line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.Hair">
            <summary>
            Hair line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.MediumDashed">
            <summary>
            Medium dashed line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.MediumDashDot">
            <summary>
            Medium dash-dot line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot line.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBorderLine.SlantDashDot">
            <summary>
            Slanted dash-dot line.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfCells">
            <summary>
            Represents the types of ExcelCells.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Blank">
            <summary>
            Empty cell.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Number">
            <summary>
            Cell contains a floating point value.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.LabelSST">
            <summary>
            Cell contains a LabelSST.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Formula">
            <summary>
            Cell contains a Formula.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Hyperlink">
            <summary>
            Cell contains a HyperLink.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.RK">
            <summary>
            Cell contains a RK-value.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.BoolErr">
            <summary>
            Cell contains a BoolErr.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Str">
            <summary>
            If Cell containing a formula string (xlsx only).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Boolean">
            <summary>
            If Cell containing a boolean (xlsx only).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCells.Error">
            <summary>
            If Cell containing an error (xlsx only). 
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfScript">
            <summary>
            Represents the types of script of ExcelCellFont
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfScript.None">
            <summary>
            Normal script position. 
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfScript.Superscript">
            <summary>
            Superscript.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfScript.Subscript">
            <summary>
            Subscript.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FunctionOR.#ctor">
            <summary>
            Returns TRUE if at least one argument is TRUE.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelWorksheetIndexException">
            <summary>
            Exception is thrown when referring to worksheet.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelIndexException">
            <summary>
            Exception is thrown when referring to some elements.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelIndexException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelIndexException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfActivePane">
            <summary>
            Type of Active Pane
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfActivePane.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfActivePane.TopRight">
            <summary>
            Top Right
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfActivePane.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfActivePane.TopLeft">
            <summary>
            Top Left
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.XF">
            <summary>
            This record contains formatting information for cells, rows, columns or styles.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.XF.#ctor(DTG.Spreadsheet.GenericBiff,DTG.Spreadsheet.ExcelCellFontCollection,DTG.Spreadsheet.FormatCollection)">
            <summary>
            Initializes a new instance of class XF.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the XF record.</param>
            <param name="Fonts">A instance of class ExcelFontCollection.</param>
            <param name="Formats">A instance of class FormatCollection.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfHAlignment">
            <summary>
            Represents the types of horizontal alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.General">
            <summary>
            Aligns data depending on the data type (text, number, etc.)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.Fill">
            <summary>
            Fill alignment repeats cell data to fill the whole ExcelCell.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.CenterAcross">
            <summary>
            Centered across selection. Multiple cells can be selected but only one should
            have value for this alignment to have effect.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHAlignment.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.DefinedStyle">
            <summary>
            This record stores the name of a user-defined ExcelCell DefinedStyle or specific options for a built-in ExcelCell DefinedStyle. All DefinedStyle records
            occur together behind the XF record list. Each DefinedStyle record refers to a style XF record, which contains the
            formatting attributes for the ExcelCell DefinedStyle.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DefinedStyle.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class DefinedStyle.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating DefinedStyle.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.DefinedStyle.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedStyle.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.DateMode">
            <summary>
            This record specifies the base date for displaying date values.
            The value = 1 then Use 1904 base date
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DateMode.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class DateMode.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating DateMode.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.DateMode.#ctor">
            <summary>
            Initializes a new instance of class DateMode with standard properties.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DateMode.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.FORMULA">
            <summary>
            Formula record (0x006) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FORMULA.#ctor(DTG.Spreadsheet.GenericBiff,System.IO.Stream)">
            <summary>
            Initializes a new instance of class FORMULA.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the FORMULA record.</param>
            <param name="DataStream">The stream into the records to which the FORMULA record belongs to. The record stream must be positioned just after the FORMULA record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.FORMULA.ValidValue(System.Double,System.IO.Stream)">
            <summary>
            Read the result of formula value
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.BOOLERR">
            <summary>
            Boolerr record (0x0205) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BOOLERR.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class RowTable.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the BOOLERR record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.BoundSheetCollection">
            <summary>
            Collection of (<see cref="T:DTG.Spreadsheet.BoundSheet"/>) records.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BoundSheetCollection.#ctor">
            <summary>
            Initializes a new instance of class BoundSheetTable.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BoundSheetCollection.AddBoundSheet(DTG.Spreadsheet.BoundSheet)">
            <summary>
            Adds the specified BoundSheet in the end of the BoundSheetCollection.
            </summary>
            <param name="NewBoundSheet">The BoundSheet to be added to the end of the BoundSheetCollection.</param>
        </member>
        <member name="P:DTG.Spreadsheet.BoundSheetCollection.Item(System.Int32)">
            <summary>
            Gets the BoundSheet record with the specified index.
            </summary>
            <param name="Index">The zero-based index of the BoundSheetCollection.</param>
            <returns>The BoundSheet at the specified index of the BoundSheetCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.BoundSheetCollection.Count">
            <summary>
            Gets the number of elements contained in the BoundSheetCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BoundSheetCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.Functions">
            <summary>
            Contains static methods for working with functions.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.InitFunctions">
            <summary>
            This method initializes the function.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.GetFunction(System.String)">
            <summary>
            Returns of the function with specified name.
            </summary>
            <param name="FunctionName">The name of the function.</param>
            <returns>The specified index.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.GetFunction(System.Int16)">
            <summary>
            Returns of the function with specified ID.
            </summary>
            <param name="ID">The ID of the function.</param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.GetOperatorID(System.String)">
            <summary>
            Return of the ID of the specified operator.
            </summary>
            <param name="Operator">The name of the operator.</param>
            <returns>ID of the specified operator.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.Is2DRef(System.Object)">
            <summary>
            Checks whether the specified object is an instance of class _2DRef.
            </summary>
            <param name="obj">Object to be checked.</param>
            <returns>True, if the object is an instance of _2DRef, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsBool(System.String)">
            <summary>
            Checks whether the specified object is an instance of class Boolean.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns>True, if the object is an instance of Boolean, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsDouble(System.String)">
            <summary>
            Checks whether the specified object is an instance of class Double.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns>True, if the object is an instance of Double, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsDouble(System.Object)">
            <summary>
            Checks whether the specified object is an instance of class Double.
            </summary>
            <param name="obj">Object to be checked.</param>
            <returns>True, if the object is an instance of Double, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsFunction(System.String)">
            <summary>
            Checks whether the specified string is an name of function.
            </summary>
            <param name="FunctionName">String to be checked.</param>
            <returns>True, if the string is an name of function, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsNumber(System.Object)">
            <summary>
            Checks whether the specified object is an instance of class short.
            </summary>
            <param name="obj">Object to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsNumber(System.Char)">
            <summary>
            Checks whether the specified object is an instance of class short.
            </summary>
            <param name="EnterChar">Object to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsNumber(System.String)">
            <summary>
            Checks whether the specified object is an instance of class short.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsOperator(System.Object)">
            <summary>
            Checks whether the specified object is an operator.
            </summary>
            <param name="obj">Objet to be checked.</param>
            <returns>True, if the object is an instance of short, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsErorr(System.String)">
            <summary>
            Checks whether the specified string is an error string.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsErorr(System.Object)">
            <summary>
            Checks whether the specified object is an error string.
            </summary>
            <param name="obj">Objet to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.IsWorsheetName(System.String,DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Checks whether the specified string is an name of worksheet.
            </summary>
            <param name="EnterString">String to be checked.</param>
            <param name="WSheet">Any worksheet from workbook.</param>
            <returns>True, if the string is an name of worksheet, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.Calculate(System.Int16,System.Object[])">
            <summary>
            Calculates the value of the function.
            </summary>
            <param name="FunctionID">Specified index of function.</param>
            <param name="Values">Input parameters.</param>
            <returns>Result of calculating.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.ExcelDateToCSharp(System.Object[])">
            <summary>
            Convert DataTime from format of Excel to format of DOT.NET.
            </summary>
            <param name="Values">Value for formatting.</param>
            <returns>Instance DataTime equal the input value.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.ObjectToDouble(System.Object[])">
            <summary>
            Converts a specified value to a double-precision floating-point number.
            </summary>
            <param name="obj">Value for converting.</param>
            <returns>A double-precision floating-point number that is equivalent to value, or zero if value is null.</returns>
            <exception>
            An OperandOfFunctionException is thrown if value is not in an appropriate format for a Double type.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.Functions.ValidValueOfFormula(System.String)">
            <summary>
            Read the result of formula value
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ColInfo">
            <summary>
            This record specifies the width and default ExcelCell formatting for a given range of ExcelColumns.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ColInfo.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class ColInfo.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ColInfo record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelHeaderFooter">
            <summary>
            Represents the Header/Footer of ExcelWorksheet.
            </summary>
            <remarks>
            The header/footer string may contain special commands:<br />
            <br />
            &amp;&amp; The "&amp;" character itself<br />
            <br />
            &amp;L Start of the left section<br />
            &amp;C Start of the centred section<br />
            &amp;R Start of the right section<br />
            <br />
            &amp;P Current page number<br />
            &amp;N Page count<br />
            &amp;D Current date<br />
            &amp;T Current time<br />
            &amp;A Sheet name<br />
            &amp;F File name without path<br />
            &amp;Z File path without file name<br />
            <br />
            &amp;B Bold on/off<br />
            &amp;I Italic on/off<br />
            &amp;U Underlining on/off<br />
            &amp;E Double underlining on/off<br />
            &amp;S Strikeout on/off<br />
            &amp;X Superscript on/off<br />
            &amp;Y Subscript on/off<br />
            <br />
            &amp;"&lt;fontname&gt;" Sets new font &lt;fontname&gt;<br />
            <br />
            &amp;"&lt;fontname&gt;,&lt;fontstyle&gt;" Set new font with specified style &lt;fontstyle&gt;.
            The style &lt;fontstyle&gt; is in most cases one of "Regular", "Bold", "Italic", or "Bold Italic".
            But this setting is dependent on the used font, it may differ (localised style names, or "Standard", "Oblique", ...).<br />
            <br />
            &amp;&lt;fontheight&gt; Sets font height in points (&lt;fontheight&gt; is a decimal value). If this command is followed
            by a plain number to be printed in the header, it will be separated from the font height with a space character.
            </remarks>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelHeaderFooter.#ctor(DTG.Spreadsheet.ExcelWorksheet,System.Boolean)">
            <summary>
            Initializes a new instance of class ExcelHeader.
            </summary>
            <param name="ParentWorksheet">ExcelWorksheet that will contain the created ExcelHeaderFooter.</param>
            <param name="IsHeader">True if Header; otherwise - false.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelHeaderFooter.#ctor(DTG.Spreadsheet.ExcelWorksheet,DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class ExcelHeader.
            </summary>
            <param name="ParentWorksheet">ExcelWorksheet that will contain the created ExcelHeaderFooter.</param>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ExcelHeader.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelHeaderFooter.FirstPageString">
            <summary>
            Gets or sets a first page header/footer value.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelHeaderFooter.DefaultString">
            <summary>
            Gets or sets a default page header/footer value.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelHeaderFooter.EvenPageString">
            <summary>
            Gets or sets a even page header/footer value.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelHeaderFooter.HasHeaderFooter">
            <summary>
            Gets true if worksheet has header/footer; otherwise false.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelHeaderFooter.IsDifferentFirst">
            <summary>
            Gets or sets a different first page header/footer. When true then first header/footer specify
            first page header/footer values. If false and first header/footer are present, they are ignored.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelHeaderFooter.IsDifferentOddEven">
            <summary>
            Gets or sets a different odd and even page headers and footers. When true then odd header/footer and 
            even header/footer specify page header/footer values for odd and even pages. If false then
            odd header/footer is used, even when header/footer are present.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.IdOfFunctionException">
            <summary>
            Exception is thrown when processing formulas.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.IdOfFunctionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class IdOfFunctionException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.IdOfFunctionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class IdOfFunctionException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellRange">
            <summary>
            Represents cell range of <see cref="T:DTG.Spreadsheet.ExcelCell"/> elements contained in ExcelRow, ExcelColumn.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellRange.#ctor(DTG.Spreadsheet.ExcelWorksheet,DTG.Spreadsheet.BasicExcelCellStyle,System.Int32,System.Collections.Generic.SortedList{System.Int32,DTG.Spreadsheet.BasicExcelCell},System.Boolean)">
            <summary>
            Initializes a new instance of class ExcelCellRange.
            </summary>
            <param name="WSheet">ExcelWorksheet that will contain the created ExcelCellRange.</param>
            <param name="CellStyle">The style of ExcelRow or ExcelColumn.</param>
            <param name="IndexOfRow">The index of ExcelRow or ExcelColumn of the created ExcelCellRange.</param>
            <param name="Cells">List of ExcelCell which will contain in the created ExcelCellRange.</param>
            <param name="RowFlag">True if the created ExcelCellRange is ExcelRow, otherwise false.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellRange.Item(System.Int32)">
            <summary>
            Gets or sets ExcelCell with the specified index.
            </summary>
            <param name="Index">The zero-based specified index.</param>
            <returns>The ExcelCell with the specified index.</returns>
            <exception>
            An ExcelRowIndexException is incorrect value of index of ExcelRow.
            </exception>
            <exception>
            An ExcelColumnIndexException is incorrect value of index of ExcelColumn.
            </exception>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellRange.Heigth">
            <summary>
            Gets a number of row in range.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellRange.Width">
            <summary>
            Gets a number of column in range.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.DefinedFormats">
            <summary>
            Represents a list of common used formats.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Numerical">
            <summary>
            Returns format string "0,00".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.NumericalWithDivided">
            <summary>
            Returns format string "# ##0,00".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Currency">
            <summary>
            Returns format string "# ##0,00" + CurrencySymbol of CurrentCulture.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.CurrencyDollar">
            <summary>
            Returns format string "# ##0,00$"
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Financial">
            <summary>
            Returns format string "# ##0,00" + CurrencySymbol of CurrentCulture.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.FinancicalDollar">
            <summary>
            Returns format string "# ##0,00$".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Data_Month_Day_One">
            <summary>
            Returns format string "MM.dd".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Data_Month_Day_Two">
            <summary>
            Returns format string "MMM.dd".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.DataFullOne">
            <summary>
            Returns format string "MM.dd.yy".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.DataFullTwo">
            <summary>
            Returns format string "MM.dd.yyyy".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.DataFullThree">
            <summary>
            Returns format string "MMM.dd.yyyy".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Time_AMPM_One">
            <summary>
            Returns format string "h:mm AM/PM".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Time_AMPM_Two">
            <summary>
            Returns format string "h:mm:ss AM/PM".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Time_24Hour_One">
            <summary>
            Returns format string "hh:mm:ss".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Time_24Hour_Two">
            <summary>
            Returns format string "hh:mm:ss".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Date_Time">
            <summary>
            Returns format string "MM.DD.YY h:mm".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Percentage">
            <summary>
            Returns format string "0%".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.PercentageWithDivided">
            <summary>
            Returns format string "0.00%".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.SimpleFraction">
            <summary>
            Returns format string "# ?/?".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.TwoNumberFraction">
            <summary>
            Returns format string "# ??/??".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.TreeNumberFraction">
            <summary>
            Returns format string "# ???/???".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Exponential">
            <summary>
            Returns format string "0.00E+00".
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefinedFormats.Textual">
            <summary>
            Returns format string "@".
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfMultipleBorders">
            <summary>
            Flags for borders and border groups that can be set on the excel cell.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Outside">
            <summary>
            Outside borders.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Horizontal">
            <summary>
            Horzontal borders.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Vertical">
            <summary>
            Vertical borders.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.Diagonal">
            <summary>
            Diagonal borders.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfMultipleBorders.All">
            <summary>
            Vertical and horizontal borders.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfBiffRecord">
            <summary>
            Represents of currently supported/known Excel record id's.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Bof">
            <summary>
            BOF
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Boundsheet">
            <summary>
            BOUNDSHEET
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Index">
            <summary>
            INDEX
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.DbCell">
            <summary>
            DBCELL
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Row">
            <summary>
            ROW
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Continue">
            <summary>
            CONTINUE
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Sst">
            <summary>
            SST
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Blank">
            <summary>
            BLANK
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.BoolErr">
            <summary>
            BOOLERR
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Formula">
            <summary>
            FORMULA
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Label">
            <summary>
            LABEL
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.LabelSst">
            <summary>
            LABELSST
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.MulBlank">
            <summary>
            MULBLANK
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.MulRk">
            <summary>
            MULRK
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.String">
            <summary>
            STRING
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Xf">
            <summary>
            XF
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Eof">
            <summary>
            EOF
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Rk">
            <summary>
            RK
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Number">
            <summary>
            NUMBER
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Array">
            <summary>
            ARRAY
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.ShrFmla">
            <summary>
            SHRFMLA
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Table">
            <summary>
            TABLE
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Font">
            <summary>
            FONT
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Format">
            <summary>
            FORMAT
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Palette">
            <summary>
            PALETTE
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Hyperlink">
            <summary>
            HLINK
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Style">
            <summary>
            STYLE
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.RString">
            <summary>
            RSTRING
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Dimension">
            <summary>
            DIMENSION
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.MergedCells">
            <summary>
            MERGEDCELLS
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Window1">
            <summary>
            WINDOW1
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Window2">
            <summary>
            WINDOW2
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.DateMode">
            <summary>
            DATEMODE
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.ColInfo">
            <summary>
            COLINFO
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.DefColumnWidth">
            <summary>
            DEFCOLWIDTH
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.SupBook">
            <summary>
            SUPBOOK
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.ExternSheet">
            <summary>
            EXTERNSHEET
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfBiffRecord.Obj">
            <summary>
            Describes a Graphic Object
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FormatCollection">
            <summary>
            Collection of (<see cref="T:DTG.Spreadsheet.Format"/>).
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.#ctor">
            <summary>
            Initializes a new instance of class FormatCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.InitStandartFormatTable">
            <summary>
            Initializes a table of standart Formats.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.AddFormat(DTG.Spreadsheet.Format)">
            <summary>
            Adds the specified Format in the FormatCollection.
            </summary>
            <param name="NewFormat">The Format to be added to the FormatCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.GetFormatIndex(System.String)">
            <summary>
            Returns (the zero-based) index of the first occurrence of the specified Format in a FormatCollection.
            </summary>
            <param name="format">The Format to locate in the FormatCollection.</param>
            <returns>The zero-based index of the first occurrence of the Format parameter, if Format is found in the FormatCollection.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.GetFormatString(System.Int16)">
            <summary>
            Returns Format from FormatCollection with the specified index.
            </summary>
            <param name="Index">The zero-based index.</param>
            <returns>The Format at the specified index of the FormatCollection.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.IsContainFormat(System.String)">
            <summary>
            Determines whether FormatCollection contains a specific format.
            </summary>
            <param name="format"></param>
            <returns>True if the FormatCollection object contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormatCollection.GetStream">
            <summary>
            Return a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.FormatCollection.Item(System.Int32)">
            <summary>
            Gets the Format with the specified index.
            </summary>
            <param name="Key">The zero-based index of the FormatCollection.</param>
            <returns>The Format at the specified index of the FormatCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.FormatCollection.Count">
            <summary>
            Gets the number of elements contained in the FormatCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.FormatCollection.MaxIndex">
            <summary>
            Gets the maximum index of format.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.FormatCollection.Keys">
            <summary>
            Gets a collection containinig the key in the FormatCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.FormatCollection.StreamLengt">
            <summary>
            Gets length of the stream.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellFontCollection">
            <summary>
            Collection of (<see cref="T:DTG.Spreadsheet.ExcelCellFont"/>).
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFontCollection.#ctor">
            <summary>
            Initializes a new instance of class ExcelFontCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFontCollection.AddXmlFonts(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="XmlFontCollection"></param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFontCollection.Count">
            <summary>
            Gets the number of elements contained in the ExcelFontCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFontCollection.Keys">
            <summary>
            Gets a collection containinig the key in the ExcelFontCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFontCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.DBCell">
            <summary>
            This record is written once in a ExcelRow Block. It contains relative offset to calculate the stream position
            of the first cell record for earch ExcelRow. The ArrayOffsets in this record contains as many offsets as ExcelRow
            records are presetn in the ExcelRow Block.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DBCell.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class DBCell.
            </summary>
            <param name="biff">The GenericBiff record that should contain the correct type and data for the DBCell record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.DBCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of class DBCell.
            </summary>
            <param name="NumDBCellBlocks">Number of blocks of DBCell.</param>
        </member>
        <member name="M:DTG.Spreadsheet.DBCell.GetStream">
            <summary>
            Return a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.DBCell.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RkValue">
            <summary>
            Structure that represents the value of an RK record.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RkValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of class RK value.
            </summary>
            <param name="rk">The raw RK value to interpret.</param>
        </member>
        <member name="M:DTG.Spreadsheet.RkValue.ToDouble(System.Int32)">
            <summary>
            Converts a specified value to a double-precision floating-point number.
            </summary>
            <param name="n">The signed integer to convert.</param>
            <returns>A double-precision floating-point number.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.DefColWidth">
            <summary>
            This record specifies the default ExcelColumn width.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DefColWidth.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of the class DefColWidth.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the DefColWidth record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.DefColWidth.#ctor">
            <summary>
            Initializes a new instance of the class DefColWidth with standard parameters.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.DefColWidth.Width">
            <summary>
            Gets or sets width of ExcelColumn.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.WorksheetOptions">
            <summary>
            Excel worksheet view related options.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorksheetOptions.Panes">
            <summary>
            Gets ExcelPanes.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorksheetOptions.ShowGridLines">
            <summary>
            If true, MS Excel shows grid lines. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorksheetOptions.ShowHeadings">
            <summary>
            If true, MS Excel shows row and column headers.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorksheetOptions.ActiveCell">
            <summary>
            Gets or sets the active cell.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FormulaParser">
            <summary>
            Contains static methods for working with formulas.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.StringToRPN(System.String,DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Converts a string to the formula in Reverse-Polish Notation.
            </summary>
            <param name="Formula">A string that contains the formula.</param>
            <param name="WSheet">ExcelWorksheet which contains a cell with a formula.</param>
            <returns>Reverse-Polish Notation.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.Parse(System.String,DTG.Spreadsheet.ExcelWorksheet,DTG.Spreadsheet.Function,System.Byte@)">
            <summary>
            Parsing input string and create Reverse-Polish Notation.
            </summary>
            <param name="Formula">The string what contained formula.</param>
            <param name="WSheet">The ExcelWorksheet what contained formula.</param>
            <param name="Func"></param>
            <param name="Count"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.Calculate(System.Byte[],DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Method calculates the value of Reverse-Polish Notation.
            </summary>
            <param name="RPN">Method calculates the value of Reverse-Polish Notation.</param>
            <param name="Wsheet">A ExcelWorksheet that contains cells which take part in the formula.</param>
            <returns>Result of calculation.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.FindUsedCells(System.Byte[],DTG.Spreadsheet.BasicExcelCell,DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Finds and returns the cells that are involved in the formula.
            </summary>
            <param name="RPN">Reverse-Polish Notation.</param>
            <param name="ParentCell">Referance to parental cell.</param>
            <param name="Wsheet">ExcelWorksheet contains cells which take part in the formula.</param>
            <returns>List of cells that are involved in the formula.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.ReplaceRefNToRef(System.Int32,System.Int32,DTG.Spreadsheet.SHRFMLA)">
            <summary>
            Replasing referens RefN-type to Ref-type.
            </summary>
            <param name="RowIndex">The zero-based index of ExcelRow.</param>
            <param name="ColIndex">The zero-based index of  ExcelColumn.</param>
            <param name="ShrFrma">The instance of class SHRFMLA which contain data of formulas.</param>
            <returns>RPN of formula for cell.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.ReplaceRef(System.Byte[]@,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Replase index of ExcelRow and index of ExcelColumn in RPN.
            </summary>
            <param name="RPN">The original RPN.</param>
            <param name="Index">The index of row or column.</param>
            <param name="IsRow">True if changes an index of ExcelRow; otherwise false.</param>
            <param name="IsAdd">True if the index increases; otherwise false.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.CorollaryFormula(System.String,System.Int32)">
            <summary>
            Finds subformula in formula string.
            </summary>
            <param name="Formula">String of formula.</param>
            <param name="StartInd">The zero-based starting character position of a subformula in this instance.</param>
            <returns>A String object containing subformula.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.GetIDOfRef(DTG.Spreadsheet.Function,System.Byte,System.Boolean,System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="Func"></param>
            <param name="Count"></param>
            <param name="Type">If True - tArea.</param>
            <param name="LeftChar"></param>
            <param name="RightChar"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.GetIDOf3DRef(System.Byte[],System.Int16)">
            <summary>
            
            </summary>
            <param name="RPN"></param>
            <param name="IndRef"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.GetIDOfRetFunc(DTG.Spreadsheet.Function)">
            <summary>
            
            </summary>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.AddBytes(System.Collections.Generic.List{System.Byte}@,System.Int16)">
            <summary>
            Converts the specified value to an array of bytes and adds to the end RPN.
            </summary>
            <param name="RPN">The value to convert.</param>
            <param name="Value">RPN to be added bytes.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.AddBytes(System.Collections.Generic.List{System.Byte}@,System.Double)">
            <summary>
            Converts the specified value to an array of bytes and adds to the end RPN.
            </summary>
            <param name="RPN">The value to convert.</param>
            <param name="Value">RPN to be added bytes.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FormulaParser.SetOrerators(System.Collections.Generic.Stack{System.Byte}@,System.Collections.Generic.List{System.Byte}@)">
            <summary>
            Transfers operators from a specified stack to the specified RPN in order of priority.
            </summary>
            <param name="stack">The stack a contained operators.</param>
            <param name="RPN">RPN to be transferred operators.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.#ctor">
            <summary>
            Create empty new Directory Storage.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.#ctor(DTG.Spreadsheet.CompoundFile)">
            <summary>
            Create the Directory Storage on base of the opened Compound File
            </summary>
            <param name="CompoundFile">OLE2 structure of an Excel file.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.AddDirectoryEntry(System.String)">
            <summary>
            Add new Directory Entry
            </summary>
            <param name="StreamName">The name of new Entry</param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.ReadStreamData">
            <summary>
            Read data of all Directory Entries
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.ReadMiniStreamEntryData(DTG.Spreadsheet.DirectoryEntry)">
            <summary>
            Read the stream data for obtain entry from MiniFAT.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.ReadStreamEntryData(DTG.Spreadsheet.DirectoryEntry)">
            <summary>
            Read the stream data for obtain entry from FAT.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.FindDirectoryEntry(DTG.Spreadsheet.DirectoryEntry,System.String)">
            <summary>
            Locates the stream by name
            </summary>
            <returns>The searched entry.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.Directory.SaveStreamData">
            <summary>
            Save all Directory Entries into the data Stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DTG.Spreadsheet.MiniFatTable">
            <summary>
            Create Mini FAT table.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MiniFatTable.#ctor">
            <summary>
            Constructor builds the MiniFat array.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MiniFatTable.#ctor(DTG.Spreadsheet.CompoundFile)">
            <summary>
            Read MiniFat table from compound file.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MiniFatTable.FindChain(System.Int32)">
            <summary>
            Find all items of sector chain.
            </summary>
            <param name="StartNumber"> First number of blocks chain in FAT table</param>
        </member>
        <member name="P:DTG.Spreadsheet.MiniFatTable.Item(System.Int32)">
            <summary>
            Gets one block from MiniFAT table with the specified index.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.Window2">
            <summary>
            This record contains additional settings for the window of a specific worksheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Window2.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class Window2.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating Window2.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Window2.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the class Window2 with standard parameters.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Window2.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.Window2.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.Index">
            <summary>
            This record stores the range of used rows and stream position of several records of the current ExcelWorkSheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Index.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class Index.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data of the Index record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.Index.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class Index.
            </summary>
            <param name="Firstrow">Index to first used ExcelRow(0-based).</param>
            <param name="Lastrow">Index to last used ExcelRow + 1(0-based).</param>
            <param name="NumberDBCell">Number of blocks of DBCell.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Index.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.Index.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelColumnCollection">
            <summary>
            Collection of Excel column (<see cref="T:DTG.Spreadsheet.ExcelColumn"/>).
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumnCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelColumnCollection.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelColumnCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumnCollection.GetSimpleIndex(System.String)">
            <summary>
            Converts the specified string address of ExcelColumn to integer index value.
            </summary>
            <param name="address">The specified string address.</param>
            <returns>Integer index value.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumnCollection.Remove(System.Int32)">
            <summary>
            Removes the column with the specified index.
            </summary>
            <param name="Index">The zero-based index at which column should be removed.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumnCollection.Insert(System.Int32)">
            <summary>
            Inserts an element at the specified index.
            </summary>
            <param name="Index">The zero-based index at which column should be inserted.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumnCollection.Item(System.Int32)">
            <summary>
            Gets the ExcelColumn with the specified index.
            </summary>
            <param name="Index">The zero-based index of the ExcelColumnCollection.</param>
            <returns>The ExcelColumn at the specified index of the ExcelColumnCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumnCollection.Item(System.String)">
            <summary>
            Gets the ExcelColumn with the specified name.
            </summary>
            <param name="Address">The name of the ExcelColumn in the ExcelColumnCollection.</param>
            <returns>The ExcelColumn at the specified name of the ExcelColumnCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumnCollection.Count">
            <summary>
            Gets index of last ExcelColumn in this ExcelWorksheet. 
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RSTRING">
            <summary>
            Using for old  version.
            RSTRING record (0x00D6) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RSTRING.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class RSTRING.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the RSTRING record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.ColumnInfoCollection">
            <summary>
            Collection of (<see cref="T:DTG.Spreadsheet.ColInfo"/>) records.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ColumnInfoCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.AddColumnInfo(DTG.Spreadsheet.ColInfo)">
            <summary>
            Adds information about of the ExcelColumn.
            </summary>
            <param name="ColInfo">ColInfo containing information about of the ExcelColumn range.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.GetColumnWidth(System.Int32)">
            <summary>
            Returns the width of the specified ExcelColumn.
            </summary>
            <param name="ColIndex">The zero-based specified index of ExcelColumn.</param>
            <returns>Width of specified ExcelColumn.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the width of the specified ExcelColumn.
            </summary>
            <param name="ColIndex">The zero-based specified index of ExcelColumn.</param>
            <param name="ColWidth">Width of specified ExcelColumn.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.SetDefColumnWidth(System.Int32)">
            <summary>
            Sets the default width of the specified ExcelColumn.
            </summary>
            <param name="ColIndex">The zero-based specified index of ExcelColumn.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.GetColumnStyle(System.Int32)">
            <summary>
            Returns the style of the specified ExcelColumn.
            </summary>
            <param name="Index">The zero-based specified index of ExcelColumn.</param>
            <returns>Style of specified ExcelColumn.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnInfoCollection.GetStream">
            <summary>
            Returns a stream to write to the file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ColumnInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the ColumnInfoCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColumnInfoCollection.DefColumnWidth">
            <summary>
            Gets or sets a default ExcelColumn width.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColumnInfoCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelPicture">
            <summary>
            Picture object used by <see cref="T:DTG.Spreadsheet.ExcelPictureCollection"/> in the ExcelWorksheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelPicture.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the position of the picture.
            </summary>
            <param name="FromRow">The row index of top left corner.</param>
            <param name="FromColumn">The column index of top left corner.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelPicture.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position of the picture.
            </summary>
            <param name="FromRow">The row index of top left corner.</param>
            <param name="FromColumn">The column index of top left corner.</param>
            <param name="ToRow">The row index of bottom right corner.</param>
            <param name="ToColumn">The column index of bottom right corner.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelPicture.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position of the picture.
            </summary>
            <param name="FromRow">The row index of top left corner.</param>
            <param name="FromRowOff">The vertical offset inside of top left cell.</param>
            <param name="FromColumn">The column index of top left corner.</param>
            <param name="FromColumnOff">The horizontal offset inside of top left cell.</param>
            <param name="ToRow">The row index of bottom right corner.</param>
            <param name="ToRowOff">The vertical offset inside of bottom right cell.</param>
            <param name="ToColumn">The column index of bottom right corner.</param>
            <param name="ToColumnOff">The horizontal offset inside of bottom right cell.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.Anchor">
            <summary>
            An anchor of the picture.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.Descriptor">
            <summary>
            Picture Description.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.Id">
            <summary>
            Picture ID.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.Image">
            <summary>
            Image object of the picture.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.Name">
            <summary>
            Picture Name.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.ImageType">
            <summary>
            Type of image your dealing with
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPicture.Chart">
            <summary>
            The Chart associated to the image
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfHeaderFooter">
            <summary>
            Represents type of Header/Footer.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHeaderFooter.Even">
            <summary>
            Even page header/footer value.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHeaderFooter.First">
            <summary>
            First page header/footer value.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHeaderFooter.Odd">
            <summary>
            Odd page header/footer value.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelWorksheetProtection">
            <summary>
            Represents options of worksheet protection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetProtection.#ctor">
            <summary>
            Initializes a new instance of class ProtectedSheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.IsProtected">
            <summary>
            The sheet is protected if True; otherwise - false.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.AutoFilter">
            <summary>
            Autofilters are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.DeleteColumns">
            <summary>
            Column Deleting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.DeleteRows">
            <summary>
            Row Deleting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.FormatCells">
            <summary>
            Formatting cells are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.FormatColumns">
            <summary>
            Column Formatting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.FormatRows">
            <summary>
            Row Formatting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.InsertColumns">
            <summary>
            Column Inserting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.InsertHyperlinks">
            <summary>
            Inserting of hyperlink is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.InsertRows">
            <summary>
            Row Inserting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.Objects">
            <summary>
            Objects are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.PivotTables">
            <summary>
            Pivot tables are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.Scenarios">
            <summary>
            Scenarios are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.SelectLockedCells">
            <summary>
            Selection of locked cells is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.SelectUnlockedCells">
            <summary>
            Selection of unlocked cells is locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetProtection.Sort">
            <summary>
            Sorting is locked when the sheet is protected.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Serial.Check(System.String)">
            <summary>
            Verification of License Key
            </summary>
            <param name="SerialKey">string of 4x4 characters</param>
            <returns>True - if the key is correct</returns>
        </member>
        <member name="T:DTG.Spreadsheet.Window1">
            <summary>
            This record contains general settings for the document window and global workbook settings.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Window1.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class Window1.
            </summary>
            <param name="Biff">The GenericBiff-record that should contain the correct type and data for the creating Window1.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Window1.#ctor">
            <summary>
            Initializes a new instance of the class Window1 with standard parameters.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Window1.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.NUMBER">
            <summary>
            Number record (0x0203) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.NUMBER.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class NUMBER.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the NUMBER record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.ARRAY">
            <summary>
            Array record (0x0221) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ARRAY.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class ARRAY.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ARRAY record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.VerticalPageBreakCollection">
            <summary>
            Collection of vertical page breaks (<see cref="T:DTG.Spreadsheet.VerticalPageBreak"/>). 
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes the list of page breaks.
            </summary>
            <param name="Wsheet">The actual excel worksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet,DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of collection VerticalPageBreakCollection.
            </summary>
            <param name="Wsheet">The actual excel worksheet.</param>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the VerticalPageBreakCollection.</param>
            <exception>
            An ExcelDataFormatException is thrown if the record of PageBreak is invalid.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32)">
            <summary>
            Adds a new vertical page break left to the specified column
            </summary>
            <param name="Column">The zero-based index of the Column.</param>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page break at the specified index. 
            </summary>
            <param name="Index">The zero-based index of the page break to remove.</param>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.Remove(DTG.Spreadsheet.VerticalPageBreak)">
            <summary>
            Removes the certain page break. 
            </summary>
            <param name="PageBreak">The instance of page break.</param>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreakCollection.GetStream">
            <summary>
            returns a stream for writting to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.VerticalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the vertical page break at the specified index. 
            </summary>
            <param name="Index">The zero-based index of the page break.</param>
        </member>
        <member name="P:DTG.Spreadsheet.VerticalPageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.VerticalPageBreakCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.StandartDefinedStyle">
            <summary>
            Represents of collection of standart StandartDefinedStyle.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StandartDefinedStyle.#ctor">
            <summary>
            Initializes a new instance of class StandartDefinedStyle.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StandartDefinedStyle.GetData">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.ExternSheet">
            <summary>
            The record stores a list with indexes to Supbook records
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExternSheet.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class ExternSheet.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the XF record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.ExternSheet.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of class ExternSheet.
            </summary>
            <param name="ExternSheets">ArrayList which contains RefStructures.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExternSheet.GetStream">
            <summary>
            Returs a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExternSheet.GetREFStructures">
            <summary>
            Gets the array of RefStructures.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExternSheet.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfDiagonal">
            <summary>
            Represents the types of diagonal line of cell.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfDiagonal.None">
            <summary>
            No Diagonal lines.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfDiagonal.Down">
            <summary>
            Diagonal line from the top right corner to bottom left.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfDiagonal.Up">
            <summary>
            Diagonal line from the bottom left corner to top right.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfDiagonal.Both">
            <summary>
            Two diagonal lines.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfInputString">
            <summary>
            Represents the type of string of ExcelCell.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionTODAY">
            <summary>
            Returns the current date.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FunctionSYD.#ctor">
            <summary>
            Returns the depreciation of the asset over a given period, calculated by the sum of annual numbers.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionSECOND">
            <summary>
            Converts a date in numeric format in seconds.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionMONTH">
            <summary>
            Converts a date in numeric format in coming months.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionHOUR">
            <summary>
            Converts a serial number to a clock.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelPanes">
            <summary>
            This record stores the position of window panes.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPanes.FrozenRow">
            <summary>
            Gets or set the value indicates the number of row visible in the top pane.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPanes.FrozenColumn">
            <summary>
            Gets or set the value indicates the number of columns visible in the top pane.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPanes.TopLeftCell">
            <summary>
            Top Left Cell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPanes.ActivePane">
            <summary>
            Active Pane
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPanes.IsFrozenPane">
            <summary>
            Return True if panes are frozen; otherwise - false.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelPictureCollection">
            <summary>
            Collection of the <see cref="T:DTG.Spreadsheet.ExcelPicture"/>.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelPictureCollection.Add(System.String)">
            <summary>
            Add an image from file.
            </summary>
            <param name="FileName">Image file name.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelPictureCollection.Remove(System.Int32)">
            <summary>
            Reamoves the picture from the collection.
            </summary>
            <param name="PictureId">Picture ID.</param>
            <returns>Return True if the picture was found and deleted; otherwise - false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelPictureCollection.RemoveAt(System.Int32)">
            <summary>
            Reamoves the picture from the collection.
            </summary>
            <param name="PictureIndex">Index of the picture.</param>
            <returns></returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPictureCollection.Count">
            <summary>
            Count of pictures in the collection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPictureCollection.Item(System.Int32)">
            <summary>
            Returns the picture uzing zero-base index.
            </summary>
            <param name="Index">Picture index.</param>
            <returns>An instance of <see cref="T:DTG.Spreadsheet.ExcelPicture"/> object.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.Sector">
            <summary>
            One sectors's blok.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Sector.GetStream">
            Returns a stream of the data.
        </member>
        <member name="T:DTG.Spreadsheet.XFCollection">
            <summary>
            Collection of (<see cref="T:DTG.Spreadsheet.XF"/>) records.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.XFCollection.#ctor">
            <summary>
            Initializes a new instance of the XFCollection class that is empty.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.XFCollection.AddXF(DTG.Spreadsheet.XF)">
            <summary>
            Adds the specified XF in the end of the XFCollection.
            </summary>
            <param name="NewXF">The XF to be added to the end of the XFCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.XFCollection.GetIndex(DTG.Spreadsheet.XF)">
            <summary>
            Returns (the zero-based) index of the first occurrence of the specified XFRecord in a XFCollection.
            </summary>
            <param name="Xf">The XFRecord to locate in the XFCollection.</param>
            <returns>Index (from zero) of the XFRecord, if string found in the XFCollection.
            Otherwise - a value of -1.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.XFCollection.Item(System.Int32)">
            <summary>
            Gets the XF with the specified index.
            </summary>
            <param name="Index">The zero-based index of the XFCollection.</param>
            <returns>The XF at the specified index of the XFCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.XFCollection.Count">
            <summary>
            Gets the number of elements contained in the XFCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.XFCollection.StreamLength">
            <summary>
            Gets length of the stream.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelRow">
            <summary>
            ExcelRow contains the properties of a single row and row cells.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRow.#ctor(System.Int32,DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelRow. Creates an empty ExcelRow.
            </summary>
            <param name="RowIndex">The number of created ExcelRow.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelRow.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRow.#ctor(DTG.Spreadsheet.GenericBiff,DTG.Spreadsheet.ExcelWorksheet,DTG.Spreadsheet.XFCollection)">
            <summary>
            Initializes a new instance of class ExcelRow.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data of ExcelRow record.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelRow.</param>
            <param name="XfCollection">Collection of XF.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRow.GetCells">
            <summary>
            Returns all ExcelCell from ExcelRow.
            </summary>
            <returns>An array of all cells from row.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRow.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRow.Autofit">
            <summary>
            Automatically fits row height to the minimum size required for all lines in the row cells to be visible.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.Index">
            <summary>
            Gets the zero-base index of ExcelRow.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.Height">
            <summary>
            Gets or sets ExcelRow height(px). 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.Cells">
            <summary>
            Gets cell range (<see cref="T:DTG.Spreadsheet.ExcelCellRange"/>) of the ExcelRow.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.Style">
            <summary>
            Gets or sets cell style (<see cref="T:DTG.Spreadsheet.ExcelCellStyle"/>) for contained cells.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.IsEmpty">
            <summary>
            Checks for an empty ExcelRow or not.
            </summary>
            <returns>True, if the ExcelRow an empty, otherwise false.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.LastCellIndex">
            <summary>
            Gets a index of last ExcelCell in ExcelRow.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRow.FirstCellIndex">
            <summary>
            Gets a index of first ExcelCell in ExcelRow.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.HyperlinkOptions">
            <summary>
            This class decodes the hyperlink options field
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HyperlinkOptions.#ctor(System.UInt32)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="Options">The options flag as taken from the HLINK record</param>
        </member>
        <member name="P:DTG.Spreadsheet.HyperlinkOptions.HasFileLinkOrUrl">
            <summary>
            Returns true if the HLINK record contains a file or url link
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HyperlinkOptions.HasRelativeFilePath">
            <summary>
            Returns true if the link is a relative file path
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HyperlinkOptions.HasDescription">
            <summary>
            Returns true if the HLINK record contains a description
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HyperlinkOptions.HasTextMark">
            <summary>
            Returns true if the HLINK record contains a text mark
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HyperlinkOptions.HasTargetFrame">
            <summary>
            Returns true if the HLINK record contains a target frame
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HyperlinkOptions.HasUNCPath">
            <summary>
            Returns true if the HLINK record contains a UNC path
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.BasicExcelCell">
            <summary>
            ExcelCell provides access to a single cell.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the ExcelCell class that is empty.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCell.</param>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.#ctor(DTG.Spreadsheet.XF,System.Object,DTG.Spreadsheet.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the class ExcelCell.
            </summary>
            <param name="Xf">Xf-record of created ExcelCell.</param>
            <param name="Value">Value of created ExcelCell.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCell.</param>
            <param name="RowIndex">Number of ExcelRow.</param>
            <param name="ColumnIndex">Number of ExcelColumn.</param>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.#ctor(DTG.Spreadsheet.BasicExcelCellStyle,DTG.Spreadsheet.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the class ExcelCell.
            </summary>
            <param name="Style">BasicExcelCellStyle for created ExcelCell.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCell.</param>
            <param name="RowIndex">Number of ExcelRow</param>
            <param name="ColumnIndex">Number of ExcelColumn.</param>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.ValueWithFormat">
            <summary>
            Returns string value of ExcelCell according its string format.
            </summary>
            <returns>String value of ExcelCell.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.DecimalToIndicatedDivision(System.Decimal,System.String,System.Int32@)">
            <summary>
            Translates value from decimal to indicated division.
            </summary>
            <param name="num">Decimal value.</param>
            <param name="format">String format.</param>
            <param name="FractPosition">Position of fraction.</param>
            <returns>Fraction as a string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.DateToString(System.Decimal,System.String)">
            <summary>
            Converts the value of the current DateTime object to its equivalent string representation using the specified format.
            </summary>
            <param name="num">DateTime value in Excel format.</param>
            <param name="format">The format string DateTime.</param>
            <returns>A string representation of value of the current DateTime object as specified by format.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.FindConnection">
            <summary>
            Finds ExcelCell that are involved in the formula.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.ReCountFormula">
            <summary>
            Recalculates the formula.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.IsReversibleReferens">
            <summary>
            Checks whether there are cyclic references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.IsUsedInCell(DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Checks whether the ExcelCell involved in the formulas.
            </summary>
            <param name="Cell">ExcelCell to be checked.</param>
            <returns>Returns true if the ExcelCell is involved in formulas, else - false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.IsUsingCell(DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Checks used whether other ExcelCell in the formula, which is stored in the ExcelCell.
            </summary>
            <param name="Cell">ExcelCell which contains the formula.</param>
            <returns>Returns true if the formula involving other ExcelCell.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCell.GetStream">
            <summary>
            returns a stream for writting to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.RPN">
            <summary>
            Gets or sets Reverse-Polish Notation.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.CellIndex">
            <summary>
            Gets ExcelCell address (ExcelRow index, ExcelColumn index, ExcelWorksheet index).
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.CellType">
            <summary>
            Gets or sets a type of ExcelCell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.FormulaString">
            <summary>
            Gets cell formula string.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.Hyperlink">
            <summary>
            Gets or sets a Hyperlink of ExcelCell (<see cref="T:DTG.Spreadsheet.ExcelCellHyperlink"/>) of this cell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.IsEmpty">
            <summary>
            Return true if ExcelCell is blank; Otherwise false.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.IsFormula">
            <summary>
            Checks whether the ExcelCell stores a formula. Return true if the ExcelCell stores a formula.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.IsMerged">
            <summary>
            Gets or sets a merged cell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.IsTopLeftCell">
            <summary>
            Returns true if the cell is the upper left in the merged; otherwise false.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.Style">
            <summary>
            Gets or sets a style of ExcelCell (<see cref="T:DTG.Spreadsheet.ExcelCellStyle"/>) of this cell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.Value">
            <summary>
            Gets or sets value of ExcelCell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCell.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.DifTable">
            <summary>
            Create table, which be kept sectors' number, which take up position FAT.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DifTable.#ctor(DTG.Spreadsheet.CompoundFile)">
            <summary>
            The constructur reads dif table from excel.
            </summary>
            <param name="CompoundFile">Parent Compound File.</param>
        </member>
        <member name="P:DTG.Spreadsheet.DifTable.Item(System.Int32)">
            <summary>
            Gets once block from DIF table with the specified index.
            </summary>
            <param name="Number">Specified index.</param>
            <returns>Block from DIF table.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionTRUE">
            <summary>
            Returns TRUE.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionMINUTE">
            <summary>
            Converts a number to a minute.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellAnchor">
            <summary>
            This element specifies a two cell anchor placeholder for a group, a shape, or a drawing element.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellAnchor.#ctor">
            <summary>
            Initializes a new instance of class CellAnchor.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchor.EditAs">
            <summary>
            Gets or sets a settings for how DrawingML contents shall be resized.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchor.From">
            <summary>
            The Top-Left anchor point for the drawing element.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchor.To">
            <summary>
            The Bottom-Right anchor point for the drawing element.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellHyperlink">
            <summary>
            Allows to created hyperlink to URL, to external file, to cell in the workbook.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellHyperlink.#ctor(DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Initializes a new instance of the ExcelCellHyperlink class.
            </summary>
            <param name="Cell">ExcelCell that will contain the created ExcelCellHyperlink.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellHyperlink.GetTypeOfHyperlink(System.String@)">
            <summary>
            Returns a type of specified hyperlink string.
            </summary>
            <param name="Link">The specified hyperlink string</param>
            <returns>The type of hyperlink string.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellHyperlink.Link">
            <summary>
            Gets or sets the address string for hyperlink.
            <remarks>
            Example of WWW link: "www.devtriogroup.com"<br />
            Example of Internal link: "Sheet1!B2" (Note: the address must contain worksheet name)</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellHyperlink.Description">
            <summary>
            Gets or sets the description string for hyperlink. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellHyperlink.Tooltip">
            <summary>
            Gets or sets the tooltip string for hyperlink. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellHyperlink.TypeOfLink">
            <summary>
            Gets or sets the type of hyperlink. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellHyperlink.StreamVersion">
            <summary>
            Gets a StreamVersion. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellHyperlink.MonikerGuid">
            <summary>
            Gets a MonikerGuid for this hyperlink. 
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.HyperlinkRecord">
            <summary>
            HLINK record (0x01B8) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HyperlinkRecord.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class HyperLinkRecord.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the HLINK record.</param>
            <exception>
            An InvalidRecordIdException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.HyperlinkRecord.CompareArrays(System.Byte[],System.Byte[])">
            <summary>
            Compares two specified array objects.
            </summary>
            <param name="L">The first array.</param>
            <param name="R">The second array.</param>
            <returns>Returns true if the arrays are equal, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.HyperlinkRecord.IsUrlMoniker(System.Byte[])">
            <summary>
            Checks whether the specified object is an instance of class UrlMoniker.
            </summary>
            <param name="Moniker">Object to be checked.</param>
            <returns>True, if the object is an instance of UrlMoniker, otherwise false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.HyperlinkRecord.IsFileMoniker(System.Byte[])">
            <summary>
            Checks whether the specified object is an instance of class FileMoniker.
            </summary>
            <param name="Moniker">Object to be checked.</param>
            <returns>True, if the object is an instance of FileMoniker, otherwise false.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.Format">
            <summary>
            This record contains information about a value Format.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Format.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class Format.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Format record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.Format.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of class Format.
            </summary>
            <param name="FormatStr">Format string.</param>
            <param name="Index">Index of format.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Format.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.StringRecord">
            <summary>
            Using for old version.
            String record (0x0207) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StringRecord.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class StringRecord.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the String record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.VerticalPageBreak">
            <summary>
            Each class contains the following data: Index to first column of this page break; Index to first row of this page break;
            Index to last row of this pag break.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.VerticalPageBreak.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class VerticalPageBreak.
            </summary>
            <param name="reader">The BinaryReader record that should contain the correct type and data for the VerticalPageBreak.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="P:DTG.Spreadsheet.VerticalPageBreak.Column">
            <summary>
            Index of the first column of the new page. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.VerticalPageBreak.FirstRow">
            <summary>
            Index of the first row of the new page. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.VerticalPageBreak.LastRow">
            <summary>
            Index of the last row of the new page. 
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.MergedExcelCells">
            <summary>
            A cell range address specifies a fixed cell range in the current sheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MergedExcelCells.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class MergedExcelCells.
            </summary>
            <param name="reader">BinaryReader a contain data from MergedExcelCells record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.MergedExcelCells.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class MergedExcelCells.
            </summary>
            <param name="FirstRow">First ExcelRow index.</param>
            <param name="LastRow">Last ExcelRow index.</param>
            <param name="FirstColumn">First ExcelColumn index.</param>
            <param name="LastColumn">First ExcelColumn index.</param>
        </member>
        <member name="P:DTG.Spreadsheet.MergedExcelCells.FirstRow">
            <summary>
            Gets first ExcelRow of merged cell rage.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.MergedExcelCells.LastRow">
            <summary>
            Gets last ExcelRow of merged cell rage.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.MergedExcelCells.FirstColumn">
            <summary>
            Gets first ExcelColumn of merged cell rage.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.MergedExcelCells.LastColumn">
            <summary>
            Gets last ExcelColumn of merged cell rage.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.MergedExcelCells.IsMergered">
            <summary>
            Gets or sets a merged cell range.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionYEAR">
            <summary>
            Finds the year for specified a date.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionTIMEVALUE">
            <summary>
            Converts a time in text format to number format.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionTIME">
            <summary>
            Returns the specified time in numeric format.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelChart">
            <summary>
            File created to handle Charts that may be associated to a picture.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RichTextStruct">
            <summary>
            Represents rich text string.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextStruct.#ctor(System.String,DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            Initializes a new instance of class RichTextStruct.
            </summary>
            <param name="userString">A rich text string.</param>
            <param name="font">A font that have rich text string.</param>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextStruct.op_Equality(DTG.Spreadsheet.RichTextStruct,DTG.Spreadsheet.RichTextStruct)">
            <summary>
            Equal.
            </summary>
            <param name="lhs">Left struct.</param>
            <param name="rhs">Right struct.</param>
            <returns>If Left and Right are equal - True.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextStruct.op_Inequality(DTG.Spreadsheet.RichTextStruct,DTG.Spreadsheet.RichTextStruct)">
            <summary>
            UnEqual.
            </summary>
            <param name="lhs">Left struct.</param>
            <param name="rhs">Right struct.</param>
            <returns>If Left and Right are <c>not</c> equal - True.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextStruct.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current RichTextStruct.
            </summary>
            <param name="obj">The Object to compare with the current RichTextStruct.</param>
            <returns>True if the specified Object is equal to the current RichTextStruct; otherwise, false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextStruct.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current RichTextStruct.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.RichTextStruct.RichString">
            <summary>
            Gets or sets a rich text string.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RichTextStruct.UsingFont">
            <summary>
            Gets or sets a font that have this rich text string.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCellStyle.#ctor(DTG.Spreadsheet.XF,DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Initializes a new instance of the class ExcelCellStyle.
            </summary>
            <param name="Xf">XF that contain the data for CellStyle.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="M:DTG.Spreadsheet.BasicExcelCellStyle.#ctor(DTG.Spreadsheet.BasicExcelCellStyle,DTG.Spreadsheet.BasicExcelCell)">
            <summary>
            Initializes a new instance of the class BasicExcelCellStyle on base of an existing BasicExcelCellStyle.
            </summary>
            <param name="Style">The existing BasicExcelCellStyle from which the new BasicExcelCellStyle is created.</param>
            <param name="ParentExcelCell">BasicExcelCell that will contain the created BasicExcelCellStyle.</param>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.Borders">
            <summary>
            Gets or sets cell borders (<see cref="T:DTG.Spreadsheet.ExcelCellBorder"/>).
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.Font">
            <summary>
            Gets or sets ExcelCellFont related settings (<see cref="T:DTG.Spreadsheet.ExcelCellFont"/>). 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.HorizontalAlignment">
            <summary>
            Gets or sets a horizontal alignment. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.VerticalAlignment">
            <summary>
            Gets or set a vertical alignment. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.Locked">
            <summary>
            Gets of sets if the ExcelCell is locked.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.StringFormat">
            <summary>
            Gets or sets a format string that will be used to interpret and display ExcelCell value.
            <remarks>For more information on number format strings consult Microsoft Excel documentation.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.Rotation">
            <summary>
            Gets or sets ExcelCell data rotation. Value must be between -90 and 90.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.IsVerticalText">
            <summary>
            Gets of sets whether the ExcelCell text is displayed in a vertical style.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.WrapText">
            <summary>
            Gets or sets if the text is Wrapped.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.Hidden">
            <summary>
            Gets of sets if the ExcelCell is hidden.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.Indent">
            <summary>
            Gets cell data indentation.     
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.PatternFillStyle">
            <summary>
            Gets or sets fill pattern. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.PatternForeColor">
            <summary>
            Gets or sets fill pattern foreground color. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.BackgroundColor">
            <summary>
            Gets or sets background color. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BasicExcelCellStyle.IsDefaultStyle">
            <summary>
            Gets of sets default style.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.LABEL">
            <summary>
            Using for old version.
            Label record (0x0204) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.LABEL.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class LABEL.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the LABEL record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.Dimension">
            <summary>
            Dimension record (0x0200) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Dimension.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class Dimension.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Dimension record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.Dimension.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class Dimension.
            </summary>
            <param name="FirstRow">Number of first ExcelRow.</param>
            <param name="LastRow">Number of last ExcelRow.</param>
            <param name="FirstColumn">Number of first ExcelColumn.</param>
            <param name="LastColumn">Number of last ExcelColumn.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Dimension.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class Dimension.
            </summary>
            <param name="Worksheet">ExcelWorksheet on the basis of which creates an instance of the class Dimension.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Dimension.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.Dimension.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.Supbook">
            <summary>
            This record mainly stores the URL of an external document and a list of sheet names inside this document.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.Supbook.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class Supbook.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Supbook record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.Supbook.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of class Supbook.
            </summary>
            <param name="NumOfWsheet">The number of ExcelWorksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.Supbook.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.FontRecord">
            <summary>
            Font to write to file.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FontRecord.#ctor(DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            Initializes a new instance of class FontRecord.
            </summary>
            <param name="CellFont">The existing ExcelCellFont on the basis of which creates an instance of the class FontRecord.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FontRecord.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.StandartFonts">
            <summary>
            Represents of collection of standart ExcelCellFont.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StandartFonts.#ctor">
            <summary>
            Initializes a new instance of class StandartFonts.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StandartFonts.GetData">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.NotFoundOperandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class NotFoundOperandException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.NotFoundOperandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class NotFoundOperandException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfCellDataFormat">
            <summary>
            Defined type cell data format.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.DataTime">
            <summary>
            Data or Time.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.Financial">
            <summary>
            Financial or Money.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.Fractional">
            <summary>
            Fractional.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.General">
            <summary>
            General.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.Numerical">
            <summary>
            Numerical.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.Percentage">
            <summary>
            Percentage.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.Textual">
            <summary>
            Textual.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfCellDataFormat.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.CompoundFile">
            <summary>
            CompoundFile.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.CompoundFile.#ctor">
            <summary>
            Create a new Compound File
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.CompoundFile.#ctor(System.IO.Stream)">
            <summary>
            The constructor read compound document from the stream
            </summary>
            <param name="stream">The steam of the Excel File.</param>
        </member>
        <member name="M:DTG.Spreadsheet.CompoundFile.Save(System.IO.MemoryStream[],System.String[])">
            <summary>
            Save All Directory Streams to ComoundFile
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.CompoundFile.FindStream(System.String)">
            <summary>
            Locates the stream by name
            </summary>
            <param name="StreamName">The name of the string.</param>
            <returns>The stream bytes.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.HSLColor">
            <summary>
            Represent HSL(Hue, Saturation, Luminosity) color.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HSLColor.#ctor">
            <summary>
            Initializes a new instance of class XFRecord.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FatTable">
            <summary>
            Create FatTable.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FatTable.#ctor">
            <summary>
            Create an empty fat table.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.FatTable.#ctor(DTG.Spreadsheet.CompoundFile)">
            <summary>
            Reads the fat table.
            </summary>
            <param name="CompoundFile">Parent Compound File.</param>
        </member>
        <member name="M:DTG.Spreadsheet.FatTable.FindChain(System.Int32)">
            <summary>
            Find all items of sector chain.
            </summary>
            <param name="StartNumber"> First number of blocks chain in FAT table</param>
        </member>
        <member name="P:DTG.Spreadsheet.FatTable.Item(System.Int32)">
            <summary>
            Gets one block from FAT table with the specified index.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RowOptionFlags">
            <summary>
            Option flags and default ExcelRow formatting.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RowOptionFlags.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the class RowOptionFlags.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:DTG.Spreadsheet.RowOptionFlags.OutlineLevel">
            <summary>
            Determines the outline level.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RowOptionFlags.Collapsed">
            <summary>
            Determines if the ExcelRow is collapsed.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RowOptionFlags.ZeroHeight">
            <summary>
            Determines if the ExcelRow height is zero.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RowOptionFlags.Unsynced">
            <summary>
            Determines if the ExcelRow is unsynced.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RowOptionFlags.Formatted">
            <summary>
            Determines if a ExcelRow is formatted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DTG.Spreadsheet.ContinueRecord">
            <summary>
            This class is a ContinueRecord (0x003c) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ContinueRecord.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class ContinueRecord.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ContinueRecord.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.ContinueRecord.GetDataStream">
            <summary>
            Method for getting a stream for the data in the ContinueRecord.
            </summary>
            <returns>Returns a Stream for the data in the ContinueRecord.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ContinueRecord.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelColumn">
            <summary>
            ExcelColumn contains the properties of a single column and column cells.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumn.#ctor(System.Int32,DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelColumn.
            </summary>
            <param name="ColumnIndex">ExcelColumn number.</param>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelColumn.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumn.Autofit">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumn.ColumnIndexToName(System.Int32)">
            <summary>
            Converts ExcelColumn index (1, 2, 3, ...) to ExcelColumn name ("A", "B", "C", ...).
            </summary>
            <param name="Index">ExcelColumn index.</param>
            <returns>ExcelColumn name.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumn.ColumNameToIndex(System.String)">
            <summary>
            Converts ExcelColumn name ("A", "B", ...) to ExcelColumn index (0, 1, ...). 
            </summary>
            <param name="Name">ExcelColumn name.</param>
            <returns>ExcelColumn index.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumn.Index">
            <summary>
            Gets the zero-base index of ExcelColumn.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumn.Width">
            <summary>
            Gets or sets ExcelColumn Width(pixels).
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumn.Cells">
            <summary>
            Gets cell range (<see cref="T:DTG.Spreadsheet.ExcelCellRange"/>) of the ExcelColumn.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelColumn.Style">
            <summary>
            Gets a style of this ExcelColumn.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.SHRFMLA">
            <summary>
            SHRFMLA record (0x00bc) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.SHRFMLA.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class SHRFMLA.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the SHRFMLA record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.MULBLANK">
            <summary>
            This class abstracts the MULBLANK (0x00be) Excel record found in Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MULBLANK.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class MULBLANK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the MULBLANK record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellCollection">
            <summary>
            Collection of cells (<see cref="T:DTG.Spreadsheet.ExcelCell"/>).
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelCellCollection.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelCellCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellCollection.GetSimpleIndex(System.String,System.Int32)">
            <summary>
            Method is used for converting string address into integer index of the ExcelCell("A1"). 
            </summary>
            <param name="address">String address.</param>
            <param name="WorksheetNumber">Number of ExcelWorksheet.</param>
            <returns>Integer index.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellCollection.GetComplexIndex(System.String[],System.Int32)">
            <summary>
            Method is used for converting string addresses into integer indexes of multiple ExcelCell("A1:B4").
            </summary>
            <param name="address">Array contains string address of the first ExcelCell and the last ExcelCell.</param>
            <param name="WorksheetNumber">Number of ExcelWorksheet.</param>
            <returns>Array contains indexes of all ExcelCell.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellCollection.Transposition(System.Int32@,System.Int32@)">
            <summary>
            Swaps the first and second value.
            </summary>
            <param name="FirstNum">First value.</param>
            <param name="SecondNum">Second value.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the ExcelCell with the specified ExcelRow index and ExcelColumn index.
            </summary>
            <param name="RowIndex">The  zero-based index of ExcelRow.</param>
            <param name="ColumnIndex">The  zero-based index of ExcelColumn.</param>
            <returns>The ExcelCell at the specified index of the ExcelCellCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellCollection.Item(System.String)">
            <summary>
            Gets the ExcelCell with the specified name.
            </summary>
            <param name="Index">The specified name of ExcelCell.</param>
            <returns>The ExcelCell at the specified index of the ExcelCellCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellCollection.Height">
            <summary>
            Gets a height of ExcelCellCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellCollection.Width">
            <summary>
            Gets a width of ExcelCellCollection.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfHyperlink">
            <summary>
            The type of hyperlink.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHyperlink.NONE">
            <summary>
            No hyperlink.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHyperlink.URL">
            <summary>
            The hyperlink is a remote url address.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHyperlink.FILE">
            <summary>
            The hyperlink is a local file.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfHyperlink.BOOKMARK">
            <summary>
            The hyperlink is a bookmark.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionDATEVALUE">
            <summary>
            Converts a date from text to numbers.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelColumnIndexException">
            <summary>
            Exception is thrown when referring to column.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumnIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelColumnIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.RichTextString">
            <summary>
            Represents rich text.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.Add(System.String,DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            Adds a new text with specified font to the end of existent rich text string.
            </summary>
            <param name="UserString">A new rich text string.</param>
            <param name="UsingFont">A font that have rich text string.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.Insert(System.Int32,System.String,DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            Inserts a new rich text string at the specified position of exist rich text string.
            </summary>
            <param name="Position">The zero-based index at which a new rich text string should be inserted.</param>
            <param name="UserString">The new rich text string to insert.</param>
            <param name="UsingFont">A font that have rich text string.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.RemoveAt(System.Int32)">
            <summary>
            Removes the rich text string at the specified index.
            </summary>
            <param name="Index">The zero-based index of the rich text string to remove.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.Split(System.Int32,System.Int32)">
            <summary>
            Splits the specified rich text string on two from the specified position.
            </summary>
            <param name="Index">The specified index of rich text string.</param>
            <param name="Position">The zero-based position at which a rich text string should be splits.</param>
            <returns>True - if rich text string successfully added; Otherwise - false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.Clear">
            <summary>
            Clean up of rich text.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.ToString">
            <summary>
            Returns a string that represents the rich text.
            </summary>
            <returns>The string that represents the rich text.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.op_Equality(DTG.Spreadsheet.RichTextString,DTG.Spreadsheet.RichTextString)">
            <summary>
            Equal.
            </summary>
            <param name="lhs">Left string.</param>
            <param name="rhs">Right string</param>
            <returns>If Left and Right are equal - True.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.op_Inequality(DTG.Spreadsheet.RichTextString,DTG.Spreadsheet.RichTextString)">
            <summary>
            UnEqual.
            </summary>
            <param name="lhs">Left string.</param>
            <param name="rhs">Right string.</param>
            <returns>If Left and Right are <c>not</c> equal - True.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current RichTextString.
            </summary>
            <param name="obj">The Object to compare with the current RichTextString.</param>
            <returns>True if the specified Object is equal to the current RichTextString; otherwise, false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.RichTextString.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current RichTextString.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.RichTextString.Item(System.Int32)">
            <summary>
            Gets the item of rich text string with the specified index.
            </summary>
            <param name="index">The zero-based index of rich text string.</param>
            <returns>The rich text string at the specified index of the rich text.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.RichTextString.Count">
            <summary>
            Gets the number rich text strings in rich text.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellFont">
            <summary>
            This class contains font related settings.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of the class ExcelCellFont.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the ExcelCellFont record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.#ctor(DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            Initializes a new instance of the class ExcelCellFont on base of an existing ExcelCellFont.
            </summary>
            <param name="Prototype">The existing ExcelCellFont from which the new ExcelCellFont is created.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.#ctor(System.String,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the class ExcelCellFont with size and color.
            </summary>
            <param name="Name">A string representation of the FontFamily for the new ExcelCellFont.</param>
            <param name="Size">Size of the new ExcelCellFont.</param>
            <param name="FontColor">Color of the new ExcelCellFont.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.#ctor(System.String,System.Int32,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,DTG.Spreadsheet.TypeOfScript,DTG.Spreadsheet.TypeOfUnderline)">
            <summary>
            Initializes a new instance of the class ExcelCellFont with its properties.
            </summary>
            <param name="Name">A string representation of the FontFamily for the new ExcelCellFont.</param>
            <param name="Size">Size of the new ExcelCellFont.</param>
            <param name="FontColor">Color of the new ExcelCellFont.</param>
            <param name="Bold">True if new ExcelCellFont is bold.</param>
            <param name="Italic">True if new ExcelCellFont is italic.</param>
            <param name="Strikeout">True if new ExcelCellFont is </param>
            <param name="Script">Type of script of the new ExcelCellFont.</param>
            <param name="Underline">Underlininig of the new ExcelCellFont.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.GetStream">
            <summary>
            Gets a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.op_Equality(DTG.Spreadsheet.ExcelCellFont,DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            Equals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.op_Inequality(DTG.Spreadsheet.ExcelCellFont,DTG.Spreadsheet.ExcelCellFont)">
            <summary>
            UnEquals.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current ExcelCellFont.
            </summary>
            <param name="obj">The Object to compare with the current ExcelCellFont.</param>
            <returns>True if the specified Object is equal to the current ExcelCellFont; otherwise, false.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellFont.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current ExcelCellFont.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Size">
            <summary>
            Gets or sets font size. Unit is point(pixel). 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Color">
            <summary>
            Gets or set font color.
            <remarks>There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Bold">
            <summary>
            Gets or set whether the font is bold. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Italic">
            <summary>
            Gets or set whether the font is italic. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Strikeout">
            <summary>
            Gets or set whether the font is strickeout. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Name">
            <summary>
            Gets name of the font.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Superscript">
            <summary>
            Gets or sets whether the font is superscript.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Subscript">
            <summary>
            Gets or sets whether the font is subscript.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.Underline">
            <summary>
            Gets or sets whether the font is underlininig. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellFont.StreamLength">
            <summary>
            Gets a length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfUnderline">
            <summary>
            Represents the types of style underline.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfUnderline.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfUnderline.Single">
            <summary>
            Single underline. Underlines only ExcelCell data.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfUnderline.Double">
            <summary>
            Double underline. Underlines only ExcelCell data.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfUnderline.SingleAccounting">
            <summary>
            Single accounting underline. Underlines whole ExcelCell.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfUnderline.DoubleAccounting">
            <summary>
            Double accounting underline. Underlines whole ExcelCell.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.MergeredExcelCellsCollection">
            <summary>
            This record (0x00E5) contains the addersses of merged cell ranges in the cureent sheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MergeredExcelCellsCollection.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class MergeredCellsTable.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the MergeredCellsTable record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.MergeredExcelCellsCollection.#ctor">
            <summary>
            Initializes a new instance of the MergeredCellsTable class that is empty.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MergeredExcelCellsCollection.AddMERGEDCELLS(DTG.Spreadsheet.MergedExcelCells)">
            <summary>
            Adds the specified MergeredCells in the end of the table.
            </summary>
            <param name="MegeredCell">The Style to be added to the end of the MergeredCellsTable.</param>
        </member>
        <member name="M:DTG.Spreadsheet.MergeredExcelCellsCollection.GetStream">
            <summary>
            Get stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.MergeredExcelCellsCollection.Item(System.Int32)">
            <summary>
            Gets the MergeredCellsTable with the specified index.
            </summary>
            <param name="Index">The zero-based index of the MergeredCellsTable.</param>
            <returns>The MergeredCells at the specified index of the MergeredCellsTable.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.MergeredExcelCellsCollection.Count">
            <summary>
            Gets the number of MergedExcelCells contained in the MergeredExcelCellsCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.MergeredExcelCellsCollection.StreamLength">
            <summary>
            Gets length of the stream.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RKREC">
            <summary>
            Structure that represents a formatted RK value.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RKREC.#ctor(System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of class RKREC.
            </summary>
            <param name="xf">The index in the format table for the RK value.</param>
            <param name="rk">The RK value.</param>
        </member>
        <member name="T:DTG.Spreadsheet.ErrorType">
            <summary>
            Class that abstracts a boolean or error Excel value.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ErrorType.GetTypeError(System.Byte,System.Byte)">
            <summary>
            Returns the error string using error value.
            </summary>
            <param name="Error">The value to read.</param>
            <param name="FlagErrBool">Error indicator. </param>
        </member>
        <member name="T:DTG.Spreadsheet.HorizontalPageBreak">
            <summary>
            Specifies a horizontal position where the new page begins when the worksheet is printed. 
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HorizontalPageBreak.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor reads the horizontal pagebreak structure from excel file.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:DTG.Spreadsheet.HorizontalPageBreak.Row">
            <summary>
            Index of the first row of the new page. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HorizontalPageBreak.FirstColumn">
            <summary>
            Index of the first column of the new page. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.HorizontalPageBreak.LastColumn">
            <summary>
            Index of the last column of the new page. 
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet._2DRef">
            <summary>
            Structure to store a range of value of cells in the same sheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet._2DRef.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class _2DRef.
            </summary>
            <param name="TotalNumber">Number of value.</param>
        </member>
        <member name="P:DTG.Spreadsheet._2DRef.Item(System.Int32)">
            <summary>
            Get or set value with the specified index.
            </summary>
            <param name="index">The zero-based index of the elements to gets or set</param>
        </member>
        <member name="P:DTG.Spreadsheet._2DRef.Count">
            <summary>
            Gets the number of elements contained in the structure.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfEscherRecord">
            <summary>
            The enumeration of TypeOfEscherRecord.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.DggContainer">
            <summary>
            OfficeArtDggContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BstoreContainer">
            <summary>
            OfficeArtBStoreContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.DgContainer">
            <summary>
            OfficeArtDgContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.SpgrContainer">
            <summary>
            OfficeArtSpgrContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.SpContainer">
            <summary>
            OfficeArtSpContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.SolverContainer">
            <summary>
            OfficeArtSolverContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.Dgg">
            <summary>
            OfficeArtFDGGBlock
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BSE">
            <summary>
            OfficeArtFBSE (File BLIP Store Entry)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.Dg">
            <summary>
            OfficeArtFDG
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.Spgr">
            <summary>
            OfficeArtFSPGR
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.Sp">
            <summary>
            OfficeArtFSP
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.OPT">
            <summary>
            OfficeArtFOPT
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.ChildAnchor">
            <summary>
            OfficeArtChildAnchor
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.ConnectorRule">
            <summary>
            OfficeArtFConnectorRule
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.AlignRule">
            <summary>
            OfficeArtFConnectorRule
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.ArcRule">
            <summary>
            OfficeArtFArcRule
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.CalloutRule">
            <summary>
            OfficeArtFCalloutRule
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipStart">
            <summary>
            OfficeArtBStoreContainerFileBlock
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipMetafileEMF">
            <summary>
            OfficeArtBlipEMF
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipMetafileWMF">
            <summary>
            OfficeArtBlipWMF
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipMetafilePICT">
            <summary>
            OfficeArtBlipPICT
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipBitmapJPEG">
            <summary>
            OfficeArtBlipJPEG
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipBitmapPNG">
            <summary>
            OfficeArtBlipPNG
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipBitmapDIB">
            <summary>
            OfficeArtBlipDIB
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.BlipEnd">
            <summary>
            OfficeArtBStoreContainerFileBlock
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.RegroupItems">
            <summary>
            OfficeArtFRITContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.ColorMRU">
            <summary>
            OfficeArtColorMRUContainer
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.DeletedPspl">
            <summary>
            OfficeArtFPSPL
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfEscherRecord.SplitMenuColors">
            <summary>
            OfficeArtSplitMenuColorContainer
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionDAY">
            <summary>
            Converts a serial number on the day of the month.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.WorkbookOptions">
            <summary>
            Options specified when reading CSV files.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.WorkbookOptions.#ctor(DTG.Spreadsheet.ExcelWorkbook)">
            <summary>
            The constructor is not used.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.WorkbookOptions.GetCompressionXLSX">
            <summary>
            Returns the compression level.
            </summary>
            <returns>The compression level.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.WorkbookOptions.CsvDelimiter">
            <summary>
            Gets or sets the separating char for records.<br />
            Default value for this property is <c>TypeOfCsvDelimeter.SemicolonDelimited</c>. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorkbookOptions.IsCompressed">
            <summary>
            Gets or sets the specifies whether to use the compression for XLSX Excel files.<br />
            Default value for this property is <c>True</c>. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorkbookOptions.CsvCharacterEncoding">
            <summary>
            Gets or set character encoding of CSV data.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.WorkbookOptions.ActiveWorksheet">
            <summary>
            Gets or Sets an index of active Excel Worksheet.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.XlsHeader">
            <summary>
            Represents excel file header. 
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.XlsHeader.#ctor(DTG.Spreadsheet.Sector)">
            <summary>
            Reads data from stream of excel file.
            </summary>
            <param name="InputSector">The sector with header of excel file.</param>
        </member>
        <member name="T:DTG.Spreadsheet.RichTextFormat">
            <summary>
            This class stores rich text formatting for a single string in the Shared String Table.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.STRUN">
            <summary>
            Using for old version.
            STRUN contains information about string format.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RK">
            <summary>
            RK record (0x027e) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RK.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class RK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the RK record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionDATE">
            <summary>
            Returns the specified date in numeric format Microsoft Excel.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RedBlackTree`1">
            <summary>
            A red-black tree must satisfy these properties:
            1. The root is black. 
            2. All leaves are black. 
            3. Red nodes can only have black children. 
            4. All paths from a node to its leaves contain the same number of black nodes.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BinarySearchTreeBase`2.RotateLeft(`1)">
            <summary>
             Rebalance the tree by rotating the nodes to the left.
            </summary>        
        </member>
        <member name="M:DTG.Spreadsheet.BinarySearchTreeBase`2.RotateRight(`1)">
            <summary>
             Rebalance the tree by rotating the nodes to the right.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.BinarySearchTreeBase`2.Size">
            <summary>
            The number of nodes contained in the tree.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RedBlackTree`1.FixupAfterInsert(DTG.Spreadsheet.RedBlackTreeNode{`0})">
            <summary>
            restores the red-black properties to the search tree
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:DTG.Spreadsheet.RedBlackTree`1.FixupAfterDelete(DTG.Spreadsheet.RedBlackTreeNode{`0})">
            <summary>
            restores the red-black properties to the search tree
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelWorksheetCollection">
            <summary>
            Collection of (<see cref="T:DTG.Spreadsheet.ExcelWorksheet"/>).
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.#ctor(DTG.Spreadsheet.ExcelWorkbook)">
            <summary>
            Initializes a new instance of class WorksheetTable.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.Add(System.String)">
            <summary>
            Adds a new empty ExcelWorksheet to the ExcelWorkbook.
            </summary>
            <param name="Name">The Name of the new Worksheet.</param>
            <returns>An empty ExcelWorksheet.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.Add(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Adds a specified ExcelWorksheet to the ExcelWorkbook.
            </summary>
            <param name="NewWorksheet">The specified ExcelWorksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.GetIndex(System.String)">
            <summary>
            Gets zero-based index of the specified Worksheet.
            </summary>
            <param name="Name">The name of the specified Worksheet.</param>
            <returns>The zero-based index of the specified Worksheet.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.GetIndex(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Gets zero-based index of the specified Worksheet.
            </summary>
            <param name="Worksheet">The specified ExcelWorksheet.</param>
            <returns>The zero-based index of the specified ExcelWorksheet.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.Remove(System.Int32)">
            <summary>
            Removes the ExcelWorksheet with the specified index from the ExcelWorksheetCollection.
            </summary>
            <param name="Index">The zero-base index of the removing ExcelWorksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.Remove(System.String)">
            <summary>
            Removes the ExcelWorksheet with the specified name from the ExcelWorksheetCollection.
            </summary>
            <param name="Name">The name of the removing ExcelWorksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheetCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts a worksheet with the specified name at the specified index.
            </summary>
            <param name="Index">The zero-based index of the inserted worksheet.</param>
            <param name="Name">The name of the inserted worksheet.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetCollection.Count">
            <summary>
            Gets the number of elements (<see cref="T:DTG.Spreadsheet.ExcelWorksheet"/>) contained in ExcelWorksheetCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetCollection.Names">
            <summary>
            The names of all worksheets (<see cref="T:DTG.Spreadsheet.ExcelWorksheet"/>) in the ExcelWorkbook.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetCollection.Item(System.Int32)">
            <summary>
            Gets the Worksheet record with the specified index.
            </summary>
            <param name="Index">The zero-based index of the worksheet.</param>
            <returns>The Worksheet at the specified index of the table of worksheet.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheetCollection.Item(System.String)">
            <summary>
            Gets the Worksheet record with the specified name.
            </summary>
            <param name="Index">The name of the Worksheet.</param>
            <returns>The Worksheet at the specified name of the table of worksheet.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelWorksheet">
            <summary>
            Excel worksheet is a table with additional properties, identified by an unique name.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheet.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelWorksheet.
            </summary>
            <param name="Name">The name of created ExcelWorksheet.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheet.ReadFromDataTable(System.Data.DataTable)">
            <summary>
            Reads a specified <see cref="T:System.Data.DataTable"/> and create ExcelWorksheet.
            </summary>
            <param name="DTable">The specified DataTable.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheet.ReadFromDataTable(System.Int32,System.Int32,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            Reads entire DataTable and adds it as a worksheet starting on the Row and Column index selected. 
            Allows you to select whether or not to use the DataTable.Column names as the first row
            Allows you to choose how the new sheet is named.  Either via the current selected worksheet or by the datatable name
            </summary>
            <param name="StartRowIndex">Index of the row you wish to start the datatable insert.</param>
            <param name="StartColumnIndex">Column of the row you wish to start the datatable insert.</param>
            <param name="DTable">Data.DataTable</param>
            <param name="namedColumns">Set true to use DataTable.Column names as the first row inserted.</param>
            <param name="namedDataTable">Set true to use the name of the datatable as the worksheet name, set false to add it as the name of the current worksheet selected.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheet.WriteToDataTable(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows to get data of ExcelWorksheet as a <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="FirstRowIndex">The row index at which to start writing in DataTable.</param>
            <param name="FirstColumnIndex">The column index at which to start writing in DataTable.</param>
            <param name="LastRowIndex">The row index at which to end writing in DataTable.</param>
            <param name="LastColumnIndex">The column index at which to end writing in DataTable.</param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheet.WriteToDataTable(System.Int32,System.Int32)">
            <summary>
            Allows to get data of ExcelWorksheet as a <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="FirstRowIndex">The row index at which to start writing in DataTable.</param>
            <param name="FirstColumnIndex">The column index at which to start writing in DataTable.</param>
            <returns></returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorksheet.WriteToDataTable">
            <summary>
            Allows to get data of ExcelWorksheet as a <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <returns>DataTable exemplar.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Name">
            <summary>
            Gets or sets ExcelWorksheet name.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Cells">
            <summary>
            Gets collection of all ExcelCell (<see cref="T:DTG.Spreadsheet.ExcelCell"/>) in the ExcelWorksheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Rows">
            <summary>
            Gets collection of all ExcelRow (<see cref="T:DTG.Spreadsheet.ExcelRow"/>) in the ExcelWorksheet. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Columns">
            <summary>
            Gets collection of all ExcelColumn (<see cref="T:DTG.Spreadsheet.ExcelColumn"/>) in the ExcelWorksheet.  
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.DefaultColumnWidth">
            <summary>
            Gets or sets a default ExcelColumn width.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Header">
            <summary>
            Gets or sets default Header.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Footer">
            <summary>
            Gets or sets default Footer.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks">
            <summary>
            Gets collection of all horizontal page breaks (<see cref="T:DTG.Spreadsheet.HorizontalPageBreak"/>) in the worksheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.VerticalPageBreaks">
            <summary>
            Gets collection of all vertical page breaks (<see cref="T:DTG.Spreadsheet.VerticalPageBreak"/>) in the worksheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Pictures">
            <summary>
            Collection of pictures.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.ViewOptions">
            <summary>
            Excel worksheet view related options.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.Protection">
            <summary>
            This collection expresses the sheet protection options to enforce when the sheet is protected.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorksheet.XFEmptyCell">
            <summary>
            Gets XF for empty ExcelCell.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.StandartXFCollection">
            <summary>
            Represents of collection of standart XF.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StandartXFCollection.#ctor">
            <summary>
            Initializes a new instance of class StandartXFCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StandartXFCollection.GetData">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelTrialException">
            <summary>
            Exception is thrown when using a trial version DTG.Speedsheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelTrialException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelTrialException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelTrialException.#ctor(System.String,System.Exception)">
             <summary>
             Initializes a new instance of class ExcelTrialException.
             </summary>
            <param name="Message">The specified error message.</param>
             <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet._3DRefCollection">
            <summary>
            The main data of all types of references is stored in the _3DRefCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.#ctor">
            <summary>
            Initializes a new instance of class _3DRefCollection.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.Add(DTG.Spreadsheet.Supbook)">
            <summary>
            Adds the specified Supbook in the _3DRefCollection.
            </summary>
            <param name="SupBook">The Supbook to be added to the _3DRefCollection.</param>
            <returns>The zero-based index of added of the Supbook.</returns>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.Add(DTG.Spreadsheet.RefStructures)">
            <summary>
            Adds the specified RefStructures in the ExternSheets.
            </summary>
            <param name="RefStructure">The RefStructures to be added to the ExternSheets.</param>
            <returns>The zero-based index of added of the RefStructures.</returns>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.Add(DTG.Spreadsheet.ExternSheet)">
            <summary>
            Adds the specified ExternSheet in the ExternSheets.
            </summary>
            <param name="ExternSheet">The ExternSheet to be added to the ExternSheets.</param>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.ReplaseIndOfSheet(System.Int32,System.Boolean)">
            <summary>
            Increases or decreases the index of ExcelWorksheet starting at the specified index.
            </summary>
            <param name="Index">The started index.</param>
            <param name="IsAdd">True if the increase index of ExcelWorksheets; otherwise false.</param>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.GetSupBook(System.Int16)">
            <summary>
            Return the Supbook with the specified index.
            </summary>
            <param name="Index">The zero-based index of Supbook.</param>
            <returns>The Supbook at the specified index.</returns>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.GetExternSheet(System.Int16)">
            <summary>
            Return the RefStructures with the specified index.
            </summary>
            <param name="Index">The zero-based index of RefStructures.</param>
            <returns>The RefStructures at the specified index.</returns>
        </member>
        <member name="M:DTG.Spreadsheet._3DRefCollection.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet._3DRefCollection.CountOfSupBookBlock">
            <summary>
            Gets count of Supbook in the _3DRefCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet._3DRefCollection.CountOfExternSheetRec">
            <summary>
            Gets count of ExternSheets in the _3DRefCollection.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet._3DRefCollection.StreamLength">
            <summary>
            Gets length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellAnchorAddress">
            <summary>
            This element specifies the anchor point for the drawing element.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellAnchorAddress.#ctor">
            <summary>
            Initializes a new instance of the CellAnchorAddress.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchorAddress.Column">
            <summary>
            This element specifies the column that will be used to specify anchoring information for a shape within a spreadsheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchorAddress.ColumnOffset">
            <summary>
            This element is used to specify the column offset within a cell (in pixels).
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchorAddress.Row">
            <summary>
            This element specifies the row that will be used to specify anchoring information for a shape within a spreadsheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAnchorAddress.RowOffset">
            <summary>
            This element is used to specify the row offset within a cell (in pixels).
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.SST">
            <summary>
            SST - Shared String Table.
            This record contains a list of all strings used anywhere in the workbook. Each string occurs only once.
            The workbook uses indexes into the list to reference the strings.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.SST.#ctor(DTG.Spreadsheet.GenericBiff,System.IO.Stream,DTG.Spreadsheet.ExcelCellFontCollection)">
            <summary>
            Initializes a new instance of class SST.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the SST record.</param>
            <param name="DataStream">The stream into the records to which the SST record belongs to. The record stream must be positioned just after the SST record.</param>
            <param name="FontCollection">Collection of ExcelCellFont.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.SST.#ctor">
            <summary>
            Initializes a new instance of the SST class that is empty.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.SST.AddUserStrings(DTG.Spreadsheet.RichTextString)">
            <summary>
            Adds the specified string in the Shared String Table.
            </summary>
            <param name="UserString">The string to be added to the end of the collection.</param>
            <returns>Index of added string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.SST.GetStream">
            <summary>
            Return a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.SST.Count">
            <summary>
            Gets the number of elements contained in the Shared String Table.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCell">
            <summary>
            ExcelCell provides access to a single worksheet cell or to a merged range if the cell is merged.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.#ctor(DTG.Spreadsheet.ExcelWorksheet,System.Collections.Generic.List{DTG.Spreadsheet.BasicExcelCell})">
            <summary>
            Initializes a new instance of class ExcelCellTable.
            </summary>
            <param name="Cells">Array of are cells.</param>
            /// <param name="WSheet">Worksheet which belong cell.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.ValueWithFormat">
            <summary>
            Returns string value of ExcelCell according its string format.
            </summary>
            <returns>String value of ExcelCell.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.SetBordersStyles(DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color)">
            <summary>
            Sets style of the ExcelCell border lines.
            </summary>
            <param name="TopLineStyle">The style of the top border line.</param>
            <param name="TopLineColor">The color of the top border line.</param>
            <param name="BottomLineStyle">The style of the bottom border line.</param>
            <param name="BottomLineColor">The color of the bottom border line.</param>
            <param name="LeftLineStyle">The style of the left border line.</param>
            <param name="LeftLineColor">The color of the left border line.</param>
            <param name="RightLineStyle">The style of the right border line.</param>
            <param name="RightLineColor">The color of the right border line.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.SetBordersStyles(DTG.Spreadsheet.TypeOfMultipleBorders,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color)">
            <summary>
            Sets style of the ExcelCell border lines.
            </summary>
            <param name="MultipleBorders">Borders to set.</param>
            <param name="LineStyle">The style of the border line.</param>
            <param name="LineColor">The color of the border line.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.SetDiagonalStyle(DTG.Spreadsheet.TypeOfDiagonal,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color)">
            <summary>
            Sets style of the ExcelCell diagonal line(s).
            </summary>
            <param name="Diagonal">The type of the diagonal line.</param>
            <param name="DiagonalLineStyle">The style of the diagonal line.</param>
            <param name="DiagonalLineColor">The color of the diagonal line.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.SetFillColorOfCell(System.Drawing.Color,System.Drawing.Color,DTG.Spreadsheet.TypeOfFillPattern)">
            <summary>
            Sets the fill color of ExcelCell.
            </summary>
            <param name="BackGroundColor">The color of background.</param>
            <param name="PatternForeColor">The color of pattern foreground.</param>
            <param name="PatternFillStyle">The style of fill pattern foreground.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCell.SetFillColorOfCell(System.Drawing.Color)">
            <summary>
            Sets the fill color of ExcelCell.
            </summary>
            <param name="BackGroundColor">The colors of background.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.Value">
            <summary>
            Gets or sets value of ExcelCell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.RichString">
            <summary>
            Gets or sets rich text.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.Hyperlink">
            <summary>
            Gets or sets a Hyperlink.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.FormulaString">
            <summary>
            Gets cell formula string.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.RPN">
            <summary>
            Gets or sets Reverse-Polish Notation.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.Style">
            <summary>
            Gets a style of ExcelCell (<see cref="T:DTG.Spreadsheet.ExcelCellStyle"/>) of this cell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.IsMerged">
            <summary>
            Gets or sets a merged cell.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.IsEmpty">
            <summary>
            Returns true if this cell have type a blank.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.FirstRowIndex">
            <summary>
            Gets the index of the row top-left cell in range.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.FirstColumIndex">
            <summary>
            Gets the index of the column top-left cell in range.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.LastRowIndex">
            <summary>
            Gets the index of the row rigth-cell in range.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.LastColumIndex">
            <summary>
            Gets the index of the column rigth-cell in range.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.Height">
            <summary>
            Gets a number of row in range.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCell.Width">
            <summary>
            Gets a number of column in range.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.LABELSST">
            <summary>
            LabelSST record (0x00fd) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.LABELSST.#ctor(DTG.Spreadsheet.GenericBiff,DTG.Spreadsheet.SST)">
            <summary>
            Initializes a new instance of class LABELSST.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the LABELSST record.</param>
            <param name="Sst">A reference to the shared string table for the workbook.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.TypeBOF">
            <summary>
            Sub stream types that determine the data that follows the BOF record.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeBOF.WorkbookGlobals">
            <summary>
            Sub stream type for data that apply to the entire workbook.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeBOF.VisualBasicModule">
            <summary>
            Sub stream type for visual basic modules.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeBOF.Worksheet">
            <summary>
            Sub stream type for Worksheet streams.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeBOF.Chart">
            <summary>
            Sub stream type for Chart streams.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeBOF.Excel4MacroSheet">
            <summary>
            Sub stream type for Excel 4.0 Macros.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeBOF.Workspace">
            <summary>
            Sub stream type for Workspaces.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.BeginOfFile">
            <summary>
            Begin Of File (0x0809) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BeginOfFile.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class BeginOfFile.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the Begin Of File record.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.BeginOfFile.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of class BeginOfFile.
            </summary>
            <param name="_Type">Type of begin of file.</param>
        </member>
        <member name="M:DTG.Spreadsheet.BeginOfFile.GetStream">
            <summary>
            Get stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionAND">
            <summary>
            Returns TRUE if all arguments are TRUE.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelWorkbook">
            <summary>
            Represents a ExcelWorkbook.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.CreateTrialSpreedsheet">
            <summary>
            Creates additional sheet in Trial version.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.#ctor">
            <summary>
            Creats new blank ExcelWorkbook (without ExcelWorksheets).
            <remarks>
            To add new ExcelWorksheets use <see cref="P:DTG.Spreadsheet.ExcelWorkbook.Worksheets"/> property, <see cref="M:DTG.Spreadsheet.ExcelWorksheetCollection.Add(System.String)"/> method.
            </remarks>
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.InitTables">
            <summary>
            Initializes a tables of ExcelWorkbook(ColorPalette, ExcelFontCollection, XFCollection, FormatCollection,
            DefinedStyleCollection, BoundSheetCollection, HyperlinkCollection, ExcelWorksheetCollection, _3DRefCollection)
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.CreateBasicRecords">
            <summary>
            Fills the collection with standard data.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadXLS(System.String)">
            <summary>
            Reads the XLS file and loads the workbook.
            </summary>
            <param name="FileName">Name of xls file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadXLS(System.Uri)">
            <summary>
            Reads the XLS file from remote URL address.
            </summary>
            <param name="XlsUrlAddress">URL of XLS file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadXLS(System.IO.Stream)">
            <summary>
            Reads the XLS file from the stream.
            </summary>
            <param name="ExcelStream">The stream of an Excel file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadWorkbookStream">
            <summary>
            Reads the workbook from WorkbookStream var.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadXLSX(System.String)">
            <summary>
            Reads the XLSX file and loads the workbook.
            </summary>
            <param name="FileName">Name of Excel XLSX file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadXLSX(System.Uri)">
            <summary>
            Reads the XLSX file from remote URL address.
            </summary>
            <param name="XlsxUrlAddress">URL of XLSX file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadXLSX(System.IO.Stream)">
            <summary>
            Reads the XLSX file from the stream.
            </summary>
            <param name="ExcelStream">The stream of an Excel XLSX file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadCSV(System.String)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="FileName">CSV or TXT file name.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadCSV(System.String,System.Char,System.Text.Encoding,System.Char)">
            <summary>
            Reads CSV TXT files and creates a workbook.
            </summary>
            <param name="FileName">CSV or TXT file name.</param>
            <param name="CsvDelimeter">Char that separates cells.</param>
            <param name="CharacterEncoding">Charset Excel file.</param> 
            <param name="FildMarker">Using as text qualifier. for example: if the CsvDelimeter is in quotes.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadCSV(System.Uri)">
            <summary>
            Reads CSV TXT files from remote URL address.
            </summary>
            <param name="CsvUrlAddress">URL of CSV or TXT file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadCSV(System.IO.Stream,System.Char,System.Text.Encoding,System.Char)">
            <summary>
            Reads CSV TXT files from the stream.
            </summary>
            <param name="CsvStream">The stream of CSV or TXT file.</param>
            <param name="CsvDelimeter">Char that separates cells.</param>
            <param name="CharacterEncoding">Charset Excel file.</param> 
            <param name="FildMarker">Using as text qualifier. for example: if the CsvDelimeter is in quotes.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadCSV(System.IO.Stream)">
            <summary>
            Reads CSV TXT files from the stream.
            </summary>
            <param name="CsvStream">The stream of CSV or TXT file.</param>
            <returns>The workbook as ExcelWorkbook object.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.WriteToDataSet">
            <summary>
            Allows to get data of ExcelWorkbook as a <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <returns>An instance of class DataSet.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelWorkbook.ReadFromDataSet(System.Data.DataSet)">
            <summary>
            Adds all <see cref="T:System.Data.DataTable"/> to the ExcelWorkbook from specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="Dataset">The specified DataSet.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorkbook.Worksheets">
            <summary>
            Gets the collection of Excel Worksheets (<see cref="T:DTG.Spreadsheet.ExcelWorksheet"/>). 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelWorkbook.Options">
            <summary>
            Represent option of ExcelWorkbook.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfVAlignment">
            <summary>
            Represents the types of vertical alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfVAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfVAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfVAlignment.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfVAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfVAlignment.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelRowCollection">
            <summary>
            Collection of excel row (<see cref="T:DTG.Spreadsheet.ExcelRow"/>).
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowCollection.#ctor(DTG.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of class ExcelRowCollection.
            </summary>
            <param name="Wsheet">ExcelWorksheet that will contain the created ExcelRowCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowCollection.Add(DTG.Spreadsheet.ExcelRow)">
            <summary>
            Adds the specified ExcelRow to the ExcelRowCollection.
            </summary>
            <param name="NewRow">The ExcelRow to be added to the ExcelRowCollection.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowCollection.FastRemoveRow(System.Int32)">
            <summary>
            Removes the ExcelRow with the specified number from the ExcelRowCollection.
            </summary>
            <param name="RowIndex">The zero-based specified index of ExcelRow.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowCollection.Remove(System.Int32)">
            <summary>
            Removes the ExcelRow with the specified index from the ExcelRowCollection.
            </summary>
            <param name="RowIndex">The zero-based specified index of ExcelRow.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowCollection.Insert(System.Int32)">
            <summary>
            Insert the ExcelRow with the specified index into the ExcelRowCollection.
            </summary>
            <param name="RowIndex">The zero-based index at which value should be inserted.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowCollection.GetRows">
            <summary>
            Returns all ExcelRows from ExcelRowCollection.
            </summary>
            <returns>An array of all ExcelRow from ExcelRowCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRowCollection.Count">
            <summary>
            Gets the number of currently allocated elements (<see cref="T:DTG.Spreadsheet.ExcelRow"/>). 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRowCollection.Item(System.Int32)">
            <summary>
            Gets the ExcelRow with the specified index.
            </summary>
            <param name="Index">The zero-based index of the ExcelRowCollection</param>
            <returns>The ROW at the specified index of the ExcelRowCollection.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRowCollection.FirstRow">
            <summary>
            Returns number of first ExcelRow.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRowCollection.LastRow">
            <summary>
            Returns number of last ExcelRow.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRowCollection.FirstColumnIndex">
            <summary>
            Returns number of first ExcelColumn.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelRowCollection.LastColumnIndex">
            <summary>
            Returns number of last ExcelColumn.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellAddress">
            <summary>
            This class contains a cell address including number of ExcelRow, number of ExcelColumn and number of ExcelWorkseet for individual cell.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellAddress.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of class ExcelCellAddress.
            </summary>
            <param name="IndexOfRow">The number of ExcelRow.</param>
            <param name="IndexOfColumn">The number of ExcelColumn.</param>
            <param name="IndexOfWorkseet">The number of ExcelWorkseet.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAddress.RowIndex">
            <summary>
            Gets the index of ExcelRow.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAddress.ColumnIndex">
            <summary>
            Gets the index of ExcelColumn.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellAddress.WsheetIndex">
            <summary>
            Gets the index of ExcelWorkseet.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.RefStructures">
            <summary>
            Each RefStructures contains the following data: index to Supbook record; index to first Supbook sheet; index to last Supbook sheet.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.RefStructures.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class RefStructures.
            </summary>
            <param name="reader">The BinaryReader that contain the data for the RefStructures.</param>
            <exception>
            An ExcelDataFormatException is thrown if file contains an invalid data.
            </exception>
        </member>
        <member name="M:DTG.Spreadsheet.RefStructures.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of class RefStructures.
            </summary>
            <param name="IndRec">The index to Supbook record.</param>
            <param name="FirstSheet">The index to first Supbook sheet.</param>
            <param name="LastSheet">The index to last Supbook sheet.</param>
        </member>
        <member name="P:DTG.Spreadsheet.RefStructures.IndSupBookRec">
            <summary>
            Gets or sets the index to Supbook record.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RefStructures.IndFirstSheet">
            <summary>
            Gets or sets the index to first Supbook sheet.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.RefStructures.IndLastSheet">
            <summary>
            Gets or sets the index to last Supbook sheet.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelRowIndexException">
            <summary>
            Exception is thrown when referring to row.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelRowIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.MULRK">
            <summary>
            MULRK record (0x00bd) from Excel streams.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.MULRK.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class MULRK.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the MULRK record.</param>
            <exception>
            An Exception is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionNOW">
            <summary>
            Returns the current date and time.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelDataFormatException">
            <summary>
            Exception is thrown when reading files stored incorrect data.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelDataFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelDataFormatException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelDataFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelDataFormatException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellRangeException">
            <summary>
            Exception is thrown when accessing the range.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelCellRangeException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelCellRangeException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.ColumnDescriptor">
            <summary>
            Contains a description of the column.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ColumnDescriptor.#ctor(System.Int32,System.Int32,DTG.Spreadsheet.BasicExcelCellStyle)">
            <summary>
            Initialize a new instance of class ColumnDescriptor.
            </summary>
            <param name="Index">Index of column.</param>
            <param name="Width">Width of column.</param>
            <param name="Style">Style of column.</param>
        </member>
        <member name="T:DTG.Spreadsheet.DirectoryEntry">
            <summary>
            Directory Entry Structure 
            The size of each directory entry is exactly 128 bytes.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.NameBuffer">
            <summary>
            Character array of the name of the entry, always 16-bit Unicode characters,
            with trailing zero character (results in a maximum name length of 31 characters)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.NameDataSize">
            <summary>
            Size of the used area of the character buffer of the name 
            (not character count), including the trailing zero character
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.EntryType">
            <summary>
            Type of the entry: 
            00H = Empty 03H = LockBytes (unknown)
            01H = User storage 04H = Property (unknown)
            02H = User stream 05H = Root storage
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.NodeColor">
            <summary>
            Node colour of the entry: 00H = Red 01H = Black
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.LeftChildDID">
            <summary>
            DID of the left child node inside the red-black tree of all direct members of the parent storage 
            (if this entry is a user storage or stream), ЁC1 if there is no left child
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.RightChildDID">
            <summary>
            DID of the right child node inside the red-black tree of all direct members of the parent storage
            (if this entry is a user storage or stream), ЁC1 if there is no right child
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.MembersTreeNodeDID">
            <summary>
            The directory organises direct members (storages and streams) of each storage in a separate red-black tree.
            DID of the root node entry of the red-black tree of all storage members
            (if this entry is a storage), ЁC1 otherwise
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.UniqueIdentifier">
            <summary>
            Unique identifier, if this is a storage (not of interest in the following, may be all 0)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.UserFlags">
            <summary>
            User flags (not of interest in the following, may be all 0)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.CreationTime">
            <summary>
            Time stamp of creation of this entry.
            Most implementations do not write a valid time stamp, but fill up this space with zero bytes.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.LastModificationTime">
            <summary>
            Time stamp of last modification of this entry. 
            Most implementations do not write a valid time stamp, but fill up this space with zero bytes.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.FirstSectorID">
            <summary>
            SID of first sector or short-sector, if this entry refers to a stream,
            SID of first sector of the short-stream container stream, if this is the root storage entry,
            0 otherwise
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.StreamLength">
            <summary>
            Total stream size in bytes, if this entry refers to a stream,
            total size of the shortstream container stream, if this is the root storage entry, 
            0 otherwise
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.DirectoryEntry.UnUsed">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DirectoryEntry.#ctor(System.IO.BinaryReader)">
            <summary>
            Read the entry.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DirectoryEntry.#ctor(System.String)">
            <summary>
            Create new entry.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DTG.Spreadsheet.DirectoryEntry.AddChild(DTG.Spreadsheet.DirectoryEntry)">
            <summary>
            The method to fill Members items.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:DTG.Spreadsheet.DirectoryEntry.ReadDirectoryEntry(System.IO.BinaryReader)">
            <summary>
            Read Entry structre
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.DirectoryEntry.ReadDirectoryEntry(System.IO.BinaryReader,System.Int32,DTG.Spreadsheet.DirectoryEntry,System.Collections.Generic.Dictionary{System.Int32,DTG.Spreadsheet.DirectoryEntry})">
            <summary>
            Read Directory Entry and its Members/LeftChild/RightChild
            </summary>
            <param name="reader">Data for reading</param>
            <param name="ID">ID of readed Entry</param>
            <param name="parent">Parent</param>
            <param name="DirectoryEntries">All Entries of Document</param>
        </member>
        <member name="M:DTG.Spreadsheet.DirectoryEntry.WriteDirectoryEntry(System.IO.BinaryWriter)">
            <summary>
            Write Entry structre
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.StringFactory">
            <summary>
            Utility class for reading Text from BinaryReaders
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.ReadSimpleUnicodeString(System.IO.BinaryReader)">
            <summary>
            Reads a string where the first 2 bytes are its length and is followed by unicode characters.
            </summary>
            <param name="reader">The string reader.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.ReadSimpleAsciiString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an ascii string given its length.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The length of the string.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.ReadSimpleUnicodeString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a unicode string given its length.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The length of the string.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.ReadComplexString(System.IO.BinaryReader)">
            <summary>
            Reads an encoded string where the length is followed by options that determine if the string is ascii, unicode, rtf, etc.
            </summary>
            <param name="reader">The string reader.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.ReadComplexString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an encoded string given its length where the first byte are options that determine if the string is ascii, unicode, rtf, etc.
            </summary>
            <param name="reader">The string reader.</param>
            <param name="len">The string length.</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.GetUnicodeBytes(System.String,DTG.Spreadsheet.TypeOfInputString)">
            <summary>
            Converts the specified string to an array of bytes.
            </summary>
            <param name="InputString">The string to convert.</param>
            <param name="TypeOfString">Type of string for converts.</param>
            <returns>Returns the specified string as an array of bytes.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.InitDescriptionByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for description string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.InitLinkByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for link string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.InitNullTerminatedByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for null-terminated string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.StringFactory.InitUTP16ByteArray(System.Int32,System.Byte[]@)">
            <summary>
            Initializes array of bytes for UTF16 string. And writes length of string in array.
            </summary>
            <param name="Length">The length of string.</param>
            <param name="Result">Array of bytes for initialized.</param>
            <returns>Array of bytes with length of string.</returns>
        </member>
        <member name="T:DTG.Spreadsheet.TypeOfFillPattern">
            <summary>
            Represents the types of style of fill pattern foreground.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.None">
            <summary>
            No fill pattern.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.Solid">
            <summary>
            "Solid" fill pattern using foreground color.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.Gray50">
            <summary>
            "50% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color.("Gray50" for .xls; "mediumGray" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.Gray75">
            <summary>
            "75% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray75" for .xls; "darkGray" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.Gray25">
            <summary>
            "25% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray25" for .xls; "lightGray" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.HorizontalStripe">
            <summary>
            "Horizontal Stripe" pattern. ("HorizontalStripe" for .xls; "darkHorizontal" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.VerticalStripe">
            <summary>
            "Vertical Stripe" pattern. ("VerticalStripe" for .xls; "darkVertical" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ReverseDiagonalStripe">
            <summary>
            "Reverse Diagonal Stripe" pattern. ("ReverseDiagonalStripe" for .xls; "darkDown" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.DiagonalStripe">
            <summary>
            "Diagonal Stripe" pattern. ("DiagonalStripe" for .xls; "darkUp" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.DiagonalCrosshatch">
            <summary>
            "Diagonal Crosshatch" pattern. ("DiagonalCrosshatch" for .xls; "darkGrid" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThickDiagonalCrosshatch">
            <summary>
            "Thick Diagonal Crosshatch" pattern. ("ThickDiagonalCrosshatch" for .xls; "darkTrellis" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThinHorizontalStripe">
            <summary>
            "Thin Horizontal Stripe" pattern. ("ThinHorizontalStripe" for .xls; "lightHorizontal" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThinVerticalStripe">
            <summary>
            "Thin Vertical Stripe" pattern. ("ThinVerticalStripe" for .xls; "lightVertical" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThinReverseDiagonalStripe">
            <summary>
            "Thin Reverse Diagonal Stripe" pattern. ("ThinReverseDiagonalStripe" for .xls; "lightDown" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThinDiagonalStripe">
            <summary>
            "Thin Diagonal Stripe" pattern. ("ThinDiagonalStripe" for .xls; "lightUp" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThinHorizontalCrosshatch">
            <summary>
            "Thin Horizontal Crosshatch" pattern. ("ThinHorizontalCrosshatch" for .xls; "lightGrid" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.ThinDiagonalCrosshatch">
            <summary>
            "Thin Diagonal Crosshatch" pattern. ("ThinDiagonalCrosshatch" for .xls; "lightTrellis" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.Gray12">
            <summary>
            "12% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray12" for .xls; "gray125" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.Gray6">
            <summary>
            "6% Gray" is Microsoft Excel pattern name, but any color can be used instead
            of black as a foreground color. ("Gray6" for .xls; "gray0625" for .xlsx)
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientHorizontal">
            <summary>
            Angle of the linear gradient - horizontal. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientHorizontalRevers">
            <summary>
            Angle of the linear gradient - horizontal. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientHorizontalCenter">
            <summary>
            Angle of the linear gradient - horizontal. Gradient fill from color1 to color2 to Color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientVertical">
            <summary>
            Angle of the linear gradient - vertical. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientVerticalRevers">
            <summary>
            Angle of the linear gradient - vertical. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientVarticalCenter">
            <summary>
            Angle of the linear gradient - vertical. Gradient fill from color1 to color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientDiagonalUp">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientDiagonalUpRevers">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientDiagonalUpCenter">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color1 to color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientDiagonalDown">
            <summary>
            Angle of the linear gradient - diagonal down. Gradient fill from color1 to color2 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientDiagonalDownRevers">
            <summary>
            Angle of the linear gradient - diagonal down. Gradient fill from color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientDiagonalDownCenter">
            <summary>
            Angle of the linear gradient - diagonal up. Gradient fill from color1 to color2 to color1 (Only .xlsx).
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientFromCornerTopLeft">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-left corner.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientFromCornerTopRight">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-right corner.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientFromCornerBottomLeft">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-right corner.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientFromCornerBottomRigth">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the top-right corner.
            </summary>
        </member>
        <member name="F:DTG.Spreadsheet.TypeOfFillPattern.GradientFromCenter">
            <summary>
            Path gradient type means the that the boundary of transition from one color to the next is a rectangle.
            Rectangle placed in the center corner.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ColorPalette">
            <summary>
            This class contains the definition of all user-defined colours available for ExcelCell.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ColorPalette.InitPalette">
            <summary>
            Initializes a new instance of class ColorPalette.
            </summary>.
        </member>
        <member name="M:DTG.Spreadsheet.ColorPalette.GetColor(System.Int16)">
            <summary>
            Returns color with the specified index.
            </summary>
            <param name="Index">The zero-based index of the ColorPalette.</param>
            <returns>The specified color.</returns>
        </member>
        <member name="M:DTG.Spreadsheet.ColorPalette.GetIdColor(System.Drawing.Color)">
            <summary>
            Returns Id of the specified Color from color palette.
            </summary>
            <param name="UserColor">The specified Color</param>
            <returns>Index of the specified Color.</returns>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Black">
            <summary>
            Gets Black color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.White">
            <summary>
            Gets White color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Red">
            <summary>
            Gets Red color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.BrightGreen">
            <summary>
            Gets BrightGreen color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Blue">
            <summary>
            Gets Blue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Yellow">
            <summary>
            Gets Yellow color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Magenta">
            <summary>
            Gets Magenta color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Turquoise">
            <summary>
            Gets Turquoise color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkRed">
            <summary>
            Gets DarkRed color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Green">
            <summary>
            Gets Green color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkBlue">
            <summary>
            Gets DarkBlue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkYellow">
            <summary>
            Gets DarkYellow color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Violet">
            <summary>
            Gets Violet color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Teal">
            <summary>
            Gets Teal color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Gray25">
            <summary>
            Gets Gray25 color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Gray50">
            <summary>
            Gets Gray50 color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Periwinkle">
            <summary>
            Gets Periwinkle color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.PlumPlus">
            <summary>
            Gets PlumPlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Ivory">
            <summary>
            Gets Ivory color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.LiteTurquoise">
            <summary>
            Gets LiteTurquoise color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkPurple">
            <summary>
            Gets DarkPurple color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Coral">
            <summary>
            Gets Coral color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.OceanBlue">
            <summary>
            Gets OceanBlue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.IceBlue">
            <summary>
            Gets IceBlue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkBluePlus">
            <summary>
            Gets DarkBluePlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.PinkPlus">
            <summary>
            Gets PinkPlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.YellowPlus">
            <summary>
            Gets YellowPlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.TurquoisePlus">
            <summary>
            Gets TurquoisePlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.VioletPlus">
            <summary>
            Gets VioletPlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkRedPlus">
            <summary>
            Gets DarkRedPlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.TealPlus">
            <summary>
            Gets TealPlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.BluePlus">
            <summary>
            Gets BluePlus color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.SkyBlue">
            <summary>
            Gets SkyBlue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.LightTurquoise">
            <summary>
            Gets LightTurquoise color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.LightGreen">
            <summary>
            Gets LightGreen color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.LightYellow">
            <summary>
            Gets LightYellow color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.PaleBlue">
            <summary>
            Gets PaleBlue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Rose">
            <summary>
            Gets Rose color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Lavender">
            <summary>
            Gets Lavender color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Tan">
            <summary>
            Gets Tan color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.LightBlue">
            <summary>
            Gets LightBlue color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Aqua">
            <summary>
            Gets Aqua color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Lime">
            <summary>
            Gets Lime color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Gold">
            <summary>
            Gets Gold color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.LightOrange">
            <summary>
            Gets LightOrange color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Orange">
            <summary>
            Gets Orange color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.BlueGray">
            <summary>
            Gets BlueGray color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Gray40">
            <summary>
            Gets Gray40 color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkTeal">
            <summary>
            Gets DarkTeal color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.SeaGreen">
            <summary>
            Gets SeaGreen color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.DarkGreen">
            <summary>
            Gets DarkGreen color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.OliveGreen">
            <summary>
            Gets OliveGreen color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Brown">
            <summary>
            Gets Brown color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Plum">
            <summary>
            Gets Plum color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Indigo">
            <summary>
            Gets Indigo color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.Gray80">
            <summary>
            Gets Gray80 color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_ActiveBorder">
            <summary>
            Gets a system-defined color of the active window's border.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_Window">
            <summary>
            Gets a system-defined color of the background in the client area of a window.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_WindowFrame">
            <summary>
            Gets a system-defined color of a window frame.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_ControlText">
            <summary>
            Gets a system-defined color of text in a 3-D element.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_Control">
            <summary>
            Gets a system-defined face color of a 3-D element.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_Black">
            <summary>
            Gets a system-defined Black color.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_Info">
            <summary>
            Gets a system-defined color of the background of a ToolTip.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_InfoText">
            <summary>
            Gets a system-defined color of the text of a ToolTip.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ColorPalette.KnownColor_WindowText">
            <summary>
            Gets a system-defined color of the text in the client area of a window.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.BasicProperties">
            <summary>
            Base class for Excel Cell type records. To keep are information about XF index, column number and row number.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.BasicProperties.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of class BasicProperties.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellStyle">
            <summary>
            Contains settings specifying how the ExcelCell data will be displayed.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellStyle.#ctor(DTG.Spreadsheet.BasicExcelCell[])">
            <summary>
            Initializes a new instance of class ExcelCellStyle.
            </summary>
            <param name="ExcelCells">Range of BasicExcelCell.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellStyle.#ctor(DTG.Spreadsheet.BasicExcelCellStyle)">
            <summary>
            Initializes a new instance of class ExcelCellStyle. Use for create style of ExcelRow or ExcelColumn.
            </summary>
            <param name="Style">The prototip style.</param>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.BasicStyle">
            <summary>
            Gets or sets a style.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.Borders">
            <summary>
            Gets or sets cell borders (<see cref="T:DTG.Spreadsheet.ExcelCellBorder"/>).
            <remarks>It's recomended to use <see cref="M:DTG.Spreadsheet.ExcelCell.SetBordersStyles(DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color)"/> and  <see cref="M:DTG.Spreadsheet.ExcelCell.SetDiagonalStyle(DTG.Spreadsheet.TypeOfDiagonal,DTG.Spreadsheet.TypeOfBorderLine,System.Drawing.Color)"/>.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.Font">
            <summary>
            Gets or sets ExcelCellFont related settings (<see cref="T:DTG.Spreadsheet.ExcelCellFont"/>). 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.HorizontalAlignment">
            <summary>
            Gets or sets a horizontal alignment. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.VerticalAlignment">
            <summary>
            Gets or set a vertical alignment. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.Locked">
            <summary>
            Gets of sets if the ExcelCell is locked.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.StringFormat">
            <summary>
            Gets or sets a format string that will be used to interpret and display ExcelCell value.
            <remarks>Use predefined formats <see cref="T:DTG.Spreadsheet.DefinedFormats"/> to quick set format string.
            For more information on number format strings consult Microsoft Excel documentation.
            </remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.CellDataFormat">
            <summary>
            Gets a type of cell data format.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.Rotation">
            <summary>
            Gets or sets ExcelCell data rotation. Value must be between -90 and 90.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.IsVerticalText">
            <summary>
            Gets of sets whether the ExcelCell text is displayed in a vertical style.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.WrapText">
            <summary>
            Gets or sets if the text is Wrapped.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.Hidden">
            <summary>
            Gets of sets if the ExcelCell is hidden.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.Indent">
            <summary>
            Gets cell data indentation(px).     
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.PatternFillStyle">
            <summary>
            Gets or sets fill pattern.
            <remarks>It's recomended to use <see cref="M:DTG.Spreadsheet.ExcelCell.SetFillColorOfCell(System.Drawing.Color,System.Drawing.Color,DTG.Spreadsheet.TypeOfFillPattern)"/> method.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.PatternForeColor">
            <summary>
            Gets or sets fill pattern foreground color.
            <remarks>It's recomended to use <see cref="M:DTG.Spreadsheet.ExcelCell.SetFillColorOfCell(System.Drawing.Color,System.Drawing.Color,DTG.Spreadsheet.TypeOfFillPattern)"/> method.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.BackgroundColor">
            <summary>
            Gets or sets background color. There are predefined colors <see cref="T:DTG.Spreadsheet.ColorPalette"/> for XLS format.
            <remarks>It's recomended to use <see cref="M:DTG.Spreadsheet.ExcelCell.SetFillColorOfCell(System.Drawing.Color)"/> method.</remarks>
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelCellStyle.IsDefaultStyle">
            <summary>
            Returns true if cell style is default; otherwise, false.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.HyperlinkToolTip">
            <summary>
            The HLinkTooltip record specifies the hyperlink ToolTip associated with a range of cells.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.HyperlinkToolTip.#ctor(DTG.Spreadsheet.GenericBiff)">
            <summary>
            Initializes a new instance of class HyperlinkToolTip.
            </summary>
            <param name="Biff">The GenericBiff record that should contain the correct type and data for the HyperlinkToolTip record.</param>
            <exception>
            An ExcelDataFormatException is thrown if biff contains an invalid type or invalid data.
            </exception>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelPictureAnchor">
            <summary>
            This simple type specifies all possible settings for how DrawingML contents shall be resized 
            when the rows and columns between its start and ending anchor (the from and to child elements) 
            are resized, or have additional rows/columns inserted within them. 
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPictureAnchor.Absolute">
            <summary>
            Do Not Move or Resize With Underlying Rows/Columns.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPictureAnchor.OneCell">
            <summary>
            Move With Cells but Do Not Resize.
            </summary>
        </member>
        <member name="P:DTG.Spreadsheet.ExcelPictureAnchor.TwoCell">
            <summary>
            Move and Resize With Anchor Cells.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionWEEKDAY">
            <summary>
            Converts a serial number on the day of the week.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.FunctionSLN">
            <summary>
            Calculates the value of direct property depreciation for one period.
            </summary>
        </member>
        <member name="T:DTG.Spreadsheet.ExcelCellIndexException">
            <summary>
            Exception is thrown when referring to cells.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
        </member>
        <member name="M:DTG.Spreadsheet.ExcelCellIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of class ExcelException.
            </summary>
            <param name="Message">The specified error message.</param>
            <param name="innerException">The reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:DTG.Spreadsheet.CodePage">
            <summary>
            This record stores the text encoding used to write byte strings, stored as MS Windows code page identifier.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.CodePage.#ctor">
            <summary>
            Initializes a new instance of class XFRecord. Default code page = 1200.
            </summary>
        </member>
        <member name="M:DTG.Spreadsheet.CodePage.GetStream">
            <summary>
            Returns a stream for to write to file.
            </summary>
            <returns>MemoryStream containing the data to write to file.</returns>
        </member>
    </members>
</doc>
